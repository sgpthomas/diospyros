#+title: Test Plotting with Python and Org

* Rules to Take Ablation

#+name: rulesToTake
| Rules to Take | # Rules | Time | Iter |
|---------------+---------+------+------|
|             1 |     130 |  120 |    2 |
|             2 |     120 |   85 |    2 |
|             3 |     115 |   54 |    2 |
|             4 |     117 |   45 |    2 |
|             5 |     123 |   59 |    2 |
|             6 |     131 |   49 |    2 |
|             7 |     127 |   39 |    2 |
|             8 |     131 |   43 |    2 |
|             9 |     133 |   36 |    2 |
|            10 |     130 |   35 |    2 |
|           inf |     157 | 15.5 |    2 |

TODO: track memory usage (iso add uses waaaay less memory)

#+name: isoRulesToTake
| Rules to take | # Rules | Time | Iter |
|---------------+---------+------+------|
|             1 |      18 |  240 |    2 |
|             2 |      18 |  114 |    2 |
|             4 |      18 |   64 |    2 |
|             7 |      18 |   64 |    2 |
|            10 |      18 |   94 |    2 |
|           inf |      27 |   26 |    2 |


#+begin_src python :results file :exports results :var data=isoRulesToTake :sesson test
import matplotlib.pyplot as plt
import numpy as np

'''If you have formatting lines on your table
(http://orgmode.org/manual/Column-groups.html) you need to remove them
"by hand" with a line like:

data = data[2:]
'''

'''Turn the table data into x and y data'''
rules_to_take = [a[0] for a in data]
n_rules = [a[1] for a in data]
time = [a[2] for a in data]

''' Set the x and y labels on the graph '''
plt.ylabel("Rules to take")

''' Create the legend '''
rules_pos = [i for i, _ in enumerate(rules_to_take)]

N = len(rules_to_take)
ind = np.arange(N) 
width = 0.35       

plt.bar(ind, n_rules, width, label="# Rules")
plt.bar(ind + width, time, width, label="Time")
plt.xticks(ind + width / 2, rules_to_take)
plt.legend(loc='best')
# plt.bar(rules_to_take, n_rules, color='green')

''' Save the PNG file '''
filename = "mySweetPlot.png"
plt.savefig(filename)

''' Return the PNG file path to OrgMode '''
return(filename)
#+end_src

#+RESULTS:
[[file:mySweetPlot.png]]

* How do Ruler rules perform?

#+NAME: rulerRules
| Bench    | Use dios rules? | # Ruler rules | Ruleset  | Timelimit |               Cost |
|----------+-----------------+---------------+----------+-----------+--------------------|
| conv2d   | f               |           115 | 3        |        10 |             killed |
| qprod    | f               |           115 | 3        |        10 |             killed |
| qrdecomp | f               |           115 | 3        |        10 |         162710.465 |
| qrdecomp | t               |             0 | 3        |        10 |          117177.36 |
| qrdecomp | t               |           115 | 3        |        10 |             killed |
| qrdecomp | f               |            63 | var4     |        10 |         149679.465 |
| qrdecomp | f               |            63 | var4     |        40 |         149679.465 |
| qrdecomp | f               |            63 | var4     |        60 |         149679.465 |
| qrdecomp | f               |            63 | var4     |        80 |             killed |
| qrdecomp | f               |            63 | var4     |        70 |         149679.465 |
| qrdecomp | t               |            63 | var4     |        70 |         149679.465 |
| qrdecomp | t               |            18 | iso-var4 |        10 |         163589.469 |
| qrdecomp | f               |            18 | iso-var4 |        10 |         163590.465 |
| qrdecomp | f               |            18 | iso-var4 |       120 |             killed |
| qrdecomp | f               |            18 | iso-var4 |        70 |         163589.469 |
| qrdecomp | f               |            18 | iso-var4 |        90 |             killed |
| qrdecomp | f               |            18 | iso-var4 |        80 | 163589.46999999997 |
|          |                 |               |          |           |                    |

* More rigorous =rules-to-take= ablation
:PROPERTIES:
:header-args: :var SERVER="18.223.156.160"
:END:

** Launch an EC2 Instance

- Press =SPC a d=
- Launch a machine with ~64 gbs of ram
- Copy the IP address below and run code block

  #+begin_src emacs-lisp :results silent
(save-excursion
  (outline-up-heading 1)
  (org-set-property "header-args" ":var SERVER=\"18.221.14.249\""))
  #+end_src

  #+RESULTS:

** Sync diospyros

#+name: sync-repo
#+begin_src shell :dir (magit-toplevel) :results output list :async
rsync -rv \
      --exclude=.git \
      --exclude=target \
      --exclude='*-results' \
      . "ubuntu@$SERVER:~/diospyros/"
#+end_src

#+RESULTS: sync-repo
#+begin_example
- sending incremental file list
- .gitignore
- .gitmodules
- 2d-conv-params
- LICENSE
- Log.org
- Makefile
- Oct4-1101.csv
- Oct4-1112.csv
- README.md
- ablation.sh
- cdios.py
- dios
- dios-config.json
- dios-example-gen
- iters_conv2d.png
- mat-mul-params
- oct5-1737.csv
- oct5-1754-no-ruler.csv
- oct5-1807-ruler.csv
- q-prod-params
- qr-decomp-params
- read_compile.py
- rosette.rkt
- rule.png
- rules.json
- runt.toml
- setup.py
- size.png
- sync.sh
- test.rkt
- time.png
- cdios-tests/2d-2d-conv.c
- cdios-tests/2d-2d-conv.expect
- cdios-tests/2d-conv.c
- cdios-tests/2d-conv.expect
- cdios-tests/2d-matrix-multiply.c
- cdios-tests/2d-matrix-multiply.expect
- cdios-tests/break-w.c
- cdios-tests/break-w.expect
- cdios-tests/break.c
- cdios-tests/break.expect
- cdios-tests/continue-w.c
- cdios-tests/continue-w.expect
- cdios-tests/continue.c
- cdios-tests/continue.expect
- cdios-tests/cube.c
- cdios-tests/cube.expect
- cdios-tests/error-for-update-missing.c
- cdios-tests/error-for-update-missing.expect
- cdios-tests/error-for-update.c
- cdios-tests/error-for-update.expect
- cdios-tests/error-gcc.c
- cdios-tests/error-gcc.expect
- cdios-tests/fft.c
- cdios-tests/fft.expect
- cdios-tests/if-else.c
- cdios-tests/if-else.expect
- cdios-tests/matrix-multiply.c
- cdios-tests/matrix-multiply.expect
- cdios-tests/multi-mat-mul.c
- cdios-tests/multi-mat-mul.expect
- cdios-tests/point-product.c
- cdios-tests/point-product.expect
- cdios-tests/return.c
- cdios-tests/return.expect
- cdios-tests/scalar.c
- cdios-tests/scalar.expect
- cdios-tests/sqrt.c
- cdios-tests/sqrt.expect
- cdios-tests/stencil-2d.c
- cdios-tests/stencil-2d.expect
- cdios-tests/ternary.c
- cdios-tests/ternary.expect
- configs/associativity.json
- configs/baseline.json
- configs/commutativity.json
- configs/commute_assoc.json
- configs/commute_zero.json
- configs/commute_zero_one.json
- configs/commutitivity.json
- demo/Makefile
- demo/README.md
- demo/src-completed/completed_example.c
- demo/src-completed/kernel.c
- demo/src-completed/transpose_and_multiply.c
- demo/src-completed/transpose_and_multiply.h
- demo/src/example.c
- evaluation/README.md
- evaluation/asplos_parameters.json
- evaluation/benchmarks.csv
- evaluation/benchtbl.py
- evaluation/chart_benchmarks.py
- evaluation/eval_benchmarks.py
- evaluation/no_vec_ablation.py
- evaluation/py_utils.py
- evaluation/readme.tex
- evaluation/shared.mk
- evaluation/2d-conv/Makefile
- evaluation/2d-conv/harness.c
- evaluation/__pycache__/py_utils.cpython-39.pyc
- evaluation/ablation/Makefile
- evaluation/ablation/ablation-exp-gen.py
- evaluation/ablation/ablation_chart.py
- evaluation/ablation/harness.c
- evaluation/ablation/run_all.sh
- evaluation/ablation/nature/Makefile
- evaluation/ablation/nature/harness.c
- evaluation/ablation/params/mat-mul-large
- evaluation/mat-mul/Makefile
- evaluation/mat-mul/harness.c
- evaluation/q-prod/Makefile
- evaluation/q-prod/README
- evaluation/q-prod/diospyros_test.cpp
- evaluation/q-prod/egg-kernel.c
- evaluation/q-prod/harness.c
- evaluation/q-prod/quaternion_product.cpp
- evaluation/q-prod/quaternion_product.h
- evaluation/qr-decomp/Makefile
- evaluation/qr-decomp/egg-kernel-partial-vec.c
- evaluation/qr-decomp/egg-kernel.c
- evaluation/qr-decomp/harness.c
- evaluation/src/utils.h
- evaluation/theia/.gitignore
- evaluation/theia/Makefile
- evaluation/theia/decompose-projection-matrix.cpp
- evaluation/theia/dios_rq_decomposition.h
- evaluation/theia/dpmresults.py
- evaluation/theia/rq_decomposition.h
- mat-mul-out/outputs.rkt
- mat-mul-out/prelude.rkt
- mat-mul-out/spec.rkt
- misc/shuf_patterns.py
- q-prod-out/outputs.rkt
- q-prod-out/prelude.rkt
- q-prod-out/spec.rkt
- ruler/.gitignore
- ruler/Cargo.lock
- ruler/Cargo.toml
- ruler/README.md
- ruler/dios_rules.md
- ruler/exp.org
- ruler/launch_ec2.sh
- ruler/out.json
- ruler/rules.json
- ruler/.cargo/config
- ruler/scripts/add-arrows.py
- ruler/scripts/eval.sh
- ruler/scripts/print-rules.py
- ruler/scripts/ablation/ablation.sh
- ruler/scripts/ablation/parse.js
- ruler/scripts/ablation/run.sh
- ruler/scripts/ablation/run_ruler.sh
- ruler/scripts/ablation/run_ruler_rr.sh
- ruler/scripts/ablation/visualize.py
- ruler/scripts/ablation/submitted-data/compare/10-run.tar.gz
- ruler/scripts/ablation/submitted-data/compare/parsed.json
- ruler/scripts/ablation/submitted-data/no-rr/parsed.json
- ruler/scripts/ablation/submitted-plots/10-run/by-domain-phase-times.pdf
- ruler/scripts/ablation/submitted-plots/10-run/parsed.json
- ruler/scripts/ablation/submitted-plots/10-run/bv32/by-config-rules-learned.pdf
- ruler/scripts/ablation/submitted-plots/10-run/bv4/by-config-rules-learned.pdf
- ruler/scripts/ablation/submitted-plots/10-run/rat/by-config-rules-learned.pdf
- ruler/scripts/ablation/submitted-plots/orat-rr/parsed.json
- ruler/scripts/ablation/submitted-plots/orat-rr/bv32/run-rewrites.pdf
- ruler/scripts/ablation/submitted-plots/orat-rr/bv4/run-rewrites.pdf
- ruler/scripts/ablation/submitted-plots/orat-rr/rats/run-rewrites-timeout.pdf
- ruler/scripts/cvc4-eval/Makefile
- ruler/scripts/cvc4-eval/compare.py
- ruler/scripts/cvc4-eval/cvc4/bool-2vars.sy
- ruler/scripts/cvc4-eval/cvc4/bool-3vars.sy
- ruler/scripts/cvc4-eval/cvc4/bool-4vars.sy
- ruler/scripts/cvc4-eval/cvc4/bv32-3vars.sy
- ruler/scripts/cvc4-eval/cvc4/bv4-2vars.sy
- ruler/scripts/cvc4-eval/cvc4/bv4-3vars.sy
- ruler/scripts/cvc4-eval/cvc4/bv4ns-2vars.sy
- ruler/scripts/cvc4-eval/cvc4/bv4ns-3vars.sy
- ruler/scripts/cvc4-eval/cvc4/str-3vars.sy
- ruler/scripts/cvc4-eval/cvc4/str-4vars.sy
- ruler/scripts/eqsat-sound/aggregate.sh
- ruler/scripts/eqsat-sound/derivation.sh
- ruler/scripts/eqsat-sound/eqsat-soundness.sh
- ruler/scripts/eqsat-sound/postpass.sh
- ruler/scripts/eqsat-sound/tabulate.py
- ruler/scripts/herbie-rational/filter.rkt
- ruler/scripts/herbie-rational/herbie-eval.sh
- ruler/scripts/herbie-rational/preprocess.py
- ruler/scripts/herbie-rational/seed-stats-per-test.sh
- ruler/scripts/herbie-rational/seed-variance.sh
- ruler/scripts/herbie-rational/plots/config-all-tests-box-plot.py
- ruler/scripts/herbie-rational/plots/config-per-test-bar.py
- ruler/scripts/herbie-rational/plots/config-per-test-box-plot.py
- ruler/scripts/herbie-rational/plots/plot-results.sh
- ruler/src/bv.rs
- ruler/src/convert_sexp.rs
- ruler/src/derive.rs
- ruler/src/equality.rs
- ruler/src/lib.rs
- ruler/src/util.rs
- ruler/src/bin/bigint.rs
- ruler/src/bin/bool.rs
- ruler/src/bin/bv16.rs
- ruler/src/bin/bv32.rs
- ruler/src/bin/bv4.rs
- ruler/src/bin/bv8.rs
- ruler/src/bin/dios.rs
- ruler/src/bin/float.rs
- ruler/src/bin/rational-new-div.rs
- ruler/src/bin/rational.rs
- ruler/src/bin/str.rs
- rulesets/Plot.org
- rulesets/baseline.json
- src/ast.rkt
- src/c-ast.rkt
- src/c-meta.rkt
- src/compile-passes.rkt
- src/compiler.rkt
- src/configuration.rkt
- src/dsp-insts.rkt
- src/egg-ast.rkt
- src/egg-to-dios-dsl.rkt
- src/example-gen.rkt
- src/interp.rkt
- src/main.rkt
- src/prog-sketch.rkt
- src/register-allocation-pass.rkt
- src/shuffle-truncation-pass.rkt
- src/translation-validation.rkt
- src/uninterp-fns.rkt
- src/utils.rkt
- src/backend/backend-utils.rkt
- src/backend/tensilica-g3.rkt
- src/dios-egraphs/Cargo.lock
- src/dios-egraphs/Cargo.toml
- src/dios-egraphs/common.py
- src/dios-egraphs/Diospyros/Cargo.toml
- src/dios-egraphs/Diospyros/README.md
- src/dios-egraphs/Diospyros/a.c
- src/dios-egraphs/Diospyros/build.rs
- src/dios-egraphs/Diospyros/diospyros.cpp
- src/dios-egraphs/Diospyros/mult.c
- src/dios-egraphs/Diospyros/src/lib.rs
- src/dios-egraphs/Diospyros/src/main.rs
- src/dios-egraphs/src/binopsearcher.rs
- src/dios-egraphs/src/config.rs
- src/dios-egraphs/src/cost.rs
- src/dios-egraphs/src/lib.rs
- src/dios-egraphs/src/macsearcher.rs
- src/dios-egraphs/src/main.rs
- src/dios-egraphs/src/rewriteconcats.rs
- src/dios-egraphs/src/rules.rs
- src/dios-egraphs/src/searchutils.rs
- src/dios-egraphs/src/stringconversion.rs
- src/dios-egraphs/src/veclang.rs
- src/examples/2d-conv.rkt
- src/examples/matrix-multiply.rkt
- src/examples/q-prod.rkt
- src/examples/qr-decomp.rkt
- test-result/mat-mul/2x2_2x2_4r/compile-log.txt
- test-result/mat-mul/2x2_2x2_4r/egg-kernel.c
- test-result/mat-mul/2x2_2x2_4r/outputs.rkt
- test-result/mat-mul/2x2_2x2_4r/params.json
- test-result/mat-mul/2x2_2x2_4r/prelude.rkt
- test-result/mat-mul/2x2_2x2_4r/res.rkt
- test-result/mat-mul/2x2_2x2_4r/spec.rkt
- test-result/mat-mul/2x2_2x2_4r/stats.json
- utils/.gitignore
- utils/Makefile
- utils/README.md
- utils/arguments.py
- utils/build.py
- utils/diospyros.py
- utils/eigen.py
- utils/manifest.py
- utils/source.py
- utils/test.py
- utils/utils.py
- utils/experiments/matrix_multiply/designsweep.py
- utils/experiments/matrix_multiply/pretty_print.py
- utils/generators/matrix_multiply.py
- utils/sample/spec/MatMult6x6x6x6.c
- utils/sample/spec/diospyros.json
- web-demo/README.md
- web-demo/predicated-acc.c
- web-demo/scalar-harness.c
- web-demo/serve.py
- web-demo/synth-harness.c
- web-demo/vec_norm.c
- web-demo/frontend/.gitignore
- web-demo/frontend/Makefile
- web-demo/frontend/README.md
- web-demo/frontend/config.toml
- web-demo/frontend/content/_index.md
- web-demo/frontend/custom-js/examples.js
- web-demo/frontend/custom-js/index.js
- web-demo/frontend/custom-js/package.json
- web-demo/frontend/custom-js/yarn.lock
- web-demo/frontend/layouts/index.html
- web-demo/frontend/layouts/partials/footer.html
- web-demo/frontend/layouts/partials/head.html
- web-demo/frontend/layouts/partials/nav.html
- web-demo/frontend/static/.gitkeep
- web-demo/frontend/static/css/editor.css
- web-demo/frontend/static/files/futil-short.pdf
- web-demo/frontend/static/img/dahlia-logo-small.png
- web-demo/frontend/static/img/dahlia-logo.png
- web-demo/frontend/static/js/.gitkeep
- sent 105,813 bytes  received 120,678 bytes  64,711.71 bytes/sec
- total size is 48,450,768  speedup is 213.92
#+end_example

#+RESULTS:
#+begin_example
- sending incremental file list
- .gitignore
- .gitmodules
- LICENSE
- Log.org
- Makefile
- Oct4-1101.csv
- Oct4-1112.csv
- README.md
- ablation.sh
- cdios.py
- dios
- dios-example-gen
- oct5-1737.csv
- oct5-1754-no-ruler.csv
- oct5-1807-ruler.csv
- read_compile.py
- rosette.rkt
- rule.png
- rules.json
- runt.toml
- setup.py
- sync.sh
- test.rkt
- time.png
- cdios-tests/2d-2d-conv.c
- cdios-tests/2d-2d-conv.expect
- cdios-tests/2d-conv.c
- cdios-tests/2d-conv.expect
- cdios-tests/2d-matrix-multiply.c
- cdios-tests/2d-matrix-multiply.expect
- cdios-tests/break-w.c
- cdios-tests/break-w.expect
- cdios-tests/break.c
- cdios-tests/break.expect
- cdios-tests/continue-w.c
- cdios-tests/continue-w.expect
- cdios-tests/continue.c
- cdios-tests/continue.expect
- cdios-tests/cube.c
- cdios-tests/cube.expect
- cdios-tests/error-for-update-missing.c
- cdios-tests/error-for-update-missing.expect
- cdios-tests/error-for-update.c
- cdios-tests/error-for-update.expect
- cdios-tests/error-gcc.c
- cdios-tests/error-gcc.expect
- cdios-tests/fft.c
- cdios-tests/fft.expect
- cdios-tests/if-else.c
- cdios-tests/if-else.expect
- cdios-tests/matrix-multiply.c
- cdios-tests/matrix-multiply.expect
- cdios-tests/multi-mat-mul.c
- cdios-tests/multi-mat-mul.expect
- cdios-tests/point-product.c
- cdios-tests/point-product.expect
- cdios-tests/return.c
- cdios-tests/return.expect
- cdios-tests/scalar.c
- cdios-tests/scalar.expect
- cdios-tests/sqrt.c
- cdios-tests/sqrt.expect
- cdios-tests/stencil-2d.c
- cdios-tests/stencil-2d.expect
- cdios-tests/ternary.c
- cdios-tests/ternary.expect
- cdios.egg-info/PKG-INFO
- cdios.egg-info/SOURCES.txt
- cdios.egg-info/dependency_links.txt
- cdios.egg-info/entry_points.txt
- cdios.egg-info/requires.txt
- cdios.egg-info/top_level.txt
- demo/Makefile
- demo/README.md
- demo/src-completed/completed_example.c
- demo/src-completed/kernel.c
- demo/src-completed/transpose_and_multiply.c
- demo/src-completed/transpose_and_multiply.h
- demo/src/example.c
- evaluation/README.md
- evaluation/asplos_parameters.json
- evaluation/benchmarks.csv
- evaluation/benchtbl.py
- evaluation/chart_benchmarks.py
- evaluation/eval_benchmarks.py
- evaluation/no_vec_ablation.py
- evaluation/py_utils.py
- evaluation/readme.tex
- evaluation/shared.mk
- evaluation/2d-conv/Makefile
- evaluation/2d-conv/harness.c
- evaluation/__pycache__/py_utils.cpython-39.pyc
- evaluation/ablation/Makefile
- evaluation/ablation/ablation-exp-gen.py
- evaluation/ablation/ablation_chart.py
- evaluation/ablation/harness.c
- evaluation/ablation/run_all.sh
- evaluation/ablation/nature/Makefile
- evaluation/ablation/nature/harness.c
- evaluation/ablation/params/mat-mul-large
- evaluation/mat-mul/Makefile
- evaluation/mat-mul/harness.c
- evaluation/q-prod/Makefile
- evaluation/q-prod/README
- evaluation/q-prod/diospyros_test.cpp
- evaluation/q-prod/egg-kernel.c
- evaluation/q-prod/harness.c
- evaluation/q-prod/quaternion_product.cpp
- evaluation/q-prod/quaternion_product.h
- evaluation/qr-decomp/Makefile
- evaluation/qr-decomp/egg-kernel-partial-vec.c
- evaluation/qr-decomp/egg-kernel.c
- evaluation/qr-decomp/harness.c
- evaluation/src/utils.h
- evaluation/theia/.gitignore
- evaluation/theia/Makefile
- evaluation/theia/decompose-projection-matrix.cpp
- evaluation/theia/dios_rq_decomposition.h
- evaluation/theia/dpmresults.py
- evaluation/theia/rq_decomposition.h
- misc/shuf_patterns.py
- qr-decomp-out/outputs.rkt
- qr-decomp-out/prelude.rkt
- qr-decomp-out/spec.rkt
- ruler/.gitignore
- ruler/Cargo.lock
- ruler/Cargo.toml
- ruler/README.md
- ruler/dios_rules.md
- ruler/exp.org
- ruler/launch_ec2.sh
- ruler/out.json
- ruler/rules.json
- ruler/.cargo/config
- ruler/scripts/add-arrows.py
- ruler/scripts/eval.sh
- ruler/scripts/print-rules.py
- ruler/scripts/ablation/ablation.sh
- ruler/scripts/ablation/parse.js
- ruler/scripts/ablation/run.sh
- ruler/scripts/ablation/run_ruler.sh
- ruler/scripts/ablation/run_ruler_rr.sh
- ruler/scripts/ablation/visualize.py
- ruler/scripts/ablation/submitted-data/compare/10-run.tar.gz
- ruler/scripts/ablation/submitted-data/compare/parsed.json
- ruler/scripts/ablation/submitted-data/no-rr/parsed.json
- ruler/scripts/ablation/submitted-plots/10-run/by-domain-phase-times.pdf
- ruler/scripts/ablation/submitted-plots/10-run/parsed.json
- ruler/scripts/ablation/submitted-plots/10-run/bv32/by-config-rules-learned.pdf
- ruler/scripts/ablation/submitted-plots/10-run/bv4/by-config-rules-learned.pdf
- ruler/scripts/ablation/submitted-plots/10-run/rat/by-config-rules-learned.pdf
- ruler/scripts/ablation/submitted-plots/orat-rr/parsed.json
- ruler/scripts/ablation/submitted-plots/orat-rr/bv32/run-rewrites.pdf
- ruler/scripts/ablation/submitted-plots/orat-rr/bv4/run-rewrites.pdf
- ruler/scripts/ablation/submitted-plots/orat-rr/rats/run-rewrites-timeout.pdf
- ruler/scripts/cvc4-eval/Makefile
- ruler/scripts/cvc4-eval/compare.py
- ruler/scripts/cvc4-eval/cvc4/bool-2vars.sy
- ruler/scripts/cvc4-eval/cvc4/bool-3vars.sy
- ruler/scripts/cvc4-eval/cvc4/bool-4vars.sy
- ruler/scripts/cvc4-eval/cvc4/bv32-3vars.sy
- ruler/scripts/cvc4-eval/cvc4/bv4-2vars.sy
- ruler/scripts/cvc4-eval/cvc4/bv4-3vars.sy
- ruler/scripts/cvc4-eval/cvc4/bv4ns-2vars.sy
- ruler/scripts/cvc4-eval/cvc4/bv4ns-3vars.sy
- ruler/scripts/cvc4-eval/cvc4/str-3vars.sy
- ruler/scripts/cvc4-eval/cvc4/str-4vars.sy
- ruler/scripts/eqsat-sound/aggregate.sh
- ruler/scripts/eqsat-sound/derivation.sh
- ruler/scripts/eqsat-sound/eqsat-soundness.sh
- ruler/scripts/eqsat-sound/postpass.sh
- ruler/scripts/eqsat-sound/tabulate.py
- ruler/scripts/herbie-rational/filter.rkt
- ruler/scripts/herbie-rational/herbie-eval.sh
- ruler/scripts/herbie-rational/preprocess.py
- ruler/scripts/herbie-rational/seed-stats-per-test.sh
- ruler/scripts/herbie-rational/seed-variance.sh
- ruler/scripts/herbie-rational/plots/config-all-tests-box-plot.py
- ruler/scripts/herbie-rational/plots/config-per-test-bar.py
- ruler/scripts/herbie-rational/plots/config-per-test-box-plot.py
- ruler/scripts/herbie-rational/plots/plot-results.sh
- ruler/src/bv.rs
- ruler/src/convert_sexp.rs
- ruler/src/derive.rs
- ruler/src/equality.rs
- ruler/src/lib.rs
- ruler/src/util.rs
- ruler/src/bin/bigint.rs
- ruler/src/bin/bool.rs
- ruler/src/bin/bv16.rs
- ruler/src/bin/bv32.rs
- ruler/src/bin/bv4.rs
- ruler/src/bin/bv8.rs
- ruler/src/bin/dios.rs
- ruler/src/bin/float.rs
- ruler/src/bin/rational-new-div.rs
- ruler/src/bin/rational.rs
- ruler/src/bin/str.rs
- src/ast.rkt
- src/c-ast.rkt
- src/c-meta.rkt
- src/compile-passes.rkt
- src/compiler.rkt
- src/configuration.rkt
- src/dsp-insts.rkt
- src/egg-ast.rkt
- src/egg-to-dios-dsl.rkt
- src/example-gen.rkt
- src/interp.rkt
- src/main.rkt
- src/prog-sketch.rkt
- src/register-allocation-pass.rkt
- src/shuffle-truncation-pass.rkt
- src/translation-validation.rkt
- src/uninterp-fns.rkt
- src/utils.rkt
- src/backend/backend-utils.rkt
- src/backend/tensilica-g3.rkt
- src/dios-egraphs/Cargo.lock
- src/dios-egraphs/Cargo.toml
- src/dios-egraphs/common.py
- src/dios-egraphs/Diospyros/Cargo.toml
- src/dios-egraphs/Diospyros/README.md
- src/dios-egraphs/Diospyros/a.c
- src/dios-egraphs/Diospyros/build.rs
- src/dios-egraphs/Diospyros/diospyros.cpp
- src/dios-egraphs/Diospyros/mult.c
- src/dios-egraphs/Diospyros/src/lib.rs
- src/dios-egraphs/Diospyros/src/main.rs
- src/dios-egraphs/src/binopsearcher.rs
- src/dios-egraphs/src/config.rs
- src/dios-egraphs/src/cost.rs
- src/dios-egraphs/src/lib.rs
- src/dios-egraphs/src/macsearcher.rs
- src/dios-egraphs/src/main.rs
- src/dios-egraphs/src/rewriteconcats.rs
- src/dios-egraphs/src/rules.rs
- src/dios-egraphs/src/searchutils.rs
- src/dios-egraphs/src/stringconversion.rs
- src/dios-egraphs/src/veclang.rs
- src/examples/2d-conv.rkt
- src/examples/matrix-multiply.rkt
- src/examples/q-prod.rkt
- src/examples/qr-decomp.rkt
- utils/.gitignore
- utils/Makefile
- utils/README.md
- utils/arguments.py
- utils/build.py
- utils/diospyros.py
- utils/eigen.py
- utils/manifest.py
- utils/source.py
- utils/test.py
- utils/utils.py
- utils/experiments/matrix_multiply/designsweep.py
- utils/experiments/matrix_multiply/pretty_print.py
- utils/generators/matrix_multiply.py
- utils/sample/spec/MatMult6x6x6x6.c
- utils/sample/spec/diospyros.json
- web-demo/README.md
- web-demo/predicated-acc.c
- web-demo/scalar-harness.c
- web-demo/serve.py
- web-demo/synth-harness.c
- web-demo/vec_norm.c
- web-demo/frontend/.gitignore
- web-demo/frontend/Makefile
- web-demo/frontend/README.md
- web-demo/frontend/config.toml
- web-demo/frontend/content/_index.md
- web-demo/frontend/custom-js/examples.js
- web-demo/frontend/custom-js/index.js
- web-demo/frontend/custom-js/package.json
- web-demo/frontend/custom-js/yarn.lock
- web-demo/frontend/layouts/index.html
- web-demo/frontend/layouts/partials/footer.html
- web-demo/frontend/layouts/partials/head.html
- web-demo/frontend/layouts/partials/nav.html
- web-demo/frontend/static/.gitkeep
- web-demo/frontend/static/css/editor.css
- web-demo/frontend/static/files/futil-short.pdf
- web-demo/frontend/static/img/dahlia-logo-small.png
- web-demo/frontend/static/img/dahlia-logo.png
- web-demo/frontend/static/js/.gitkeep
- sent 101,244 bytes  received 125,766 bytes  90,804.00 bytes/sec
- total size is 49,550,403  speedup is 218.27
#+end_example

** Ablation

*** Study 1
:PROPERTIES:
:header-args+: :dir (format "/ssh:ubuntu@%s:~/diospyros" (sgt/babel-get-var "SERVER"))
:END:

Parameters:
- =variables: 4=
- =no vec-add iso rule=

Run the [[file:ablation.sh][ablation.sh]] script in the background on the server. Change the IP address to be the relevant server.

#+begin_src bash
nohup ./ablation.sh var4-no-iso &
#+end_src

#+RESULTS:

Look at the output:

#+begin_src sh :results output verbatim
cat nohup.out
# tail rulesets/var4-no-iso/stdout.log
#+end_src

#+RESULTS:

Check the generated ruleset files.

#+begin_src sh
ls rulesets/var4-no-iso
#+end_src

#+RESULTS:
: - n-100-rules.json  n-35-rules.json  n-60-rules.json  n-8-rules.json
: - n-10-rules.json   n-3-rules.json   n-65-rules.json  n-90-rules.json
: - n-15-rules.json   n-40-rules.json  n-6-rules.json   n-95-rules.json
: - n-1-rules.json	  n-45-rules.json  n-70-rules.json  n-9-rules.json
: - n-20-rules.json   n-4-rules.json   n-75-rules.json  stderr.log
: - n-25-rules.json   n-50-rules.json  n-7-rules.json   stdout.log
: - n-2-rules.json	  n-55-rules.json  n-80-rules.json
: - n-30-rules.json   n-5-rules.json   n-85-rules.json

*** Data processing

**** Copy files back over

#+begin_src sh
rsync -rv \
      "ubuntu@$SERVER:~/diospyros/rulesets/var4-no-iso/*.json" \
      rulesets/var4-no-iso/
#+end_src

#+RESULTS:
#+begin_example
- receiving incremental file list
- n-1-rules.json
- n-10-rules.json
- n-100-rules.json
- n-15-rules.json
- n-2-rules.json
- n-20-rules.json
- n-25-rules.json
- n-3-rules.json
- n-30-rules.json
- n-35-rules.json
- n-4-rules.json
- n-40-rules.json
- n-45-rules.json
- n-5-rules.json
- n-50-rules.json
- n-55-rules.json
- n-6-rules.json
- n-60-rules.json
- n-65-rules.json
- n-7-rules.json
- n-70-rules.json
- n-75-rules.json
- n-8-rules.json
- n-80-rules.json
- n-85-rules.json
- n-9-rules.json
- n-90-rules.json
- n-95-rules.json
- sent 556 bytes  received 97,492 bytes  39,219.20 bytes/sec
- total size is 95,481  speedup is 0.97
#+end_example

Get filenames:

#+NAME: rules-files
#+begin_src sh :results table
ls $PWD/rulesets/var4-no-iso/*
#+end_src

#+RESULTS: rules-files
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-1-rules.json   |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-10-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-100-rules.json |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-15-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-2-rules.json   |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-20-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-25-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-3-rules.json   |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-30-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-35-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-4-rules.json   |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-40-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-45-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-5-rules.json   |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-50-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-55-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-6-rules.json   |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-60-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-65-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-7-rules.json   |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-70-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-75-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-8-rules.json   |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-80-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-85-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-9-rules.json   |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-90-rules.json  |
| /Users/sgt/Research/dios/rulesets/var4-no-iso/n-95-rules.json  |

**** Links to JSON files
#+NAME: filelink
#+begin_src elisp :var files="" :results code
(require 'dash)
(--map (format "[[file:%s][%s]]\n"
	       (car it)
	       (car (last (string-split (car it)))))
       files)
#+end_src


Links to files:
#+begin_src emacs-lisp :results value :var fs=rules-files :post filelink(files=*this*)
fs
#+end_src

#+RESULTS:
- [[file:./var4-no-iso/n-100-rules.json][n-100-rules.json]]
- [[file:./var4-no-iso/n-10-rules.json][n-10-rules.json]]
- [[file:./var4-no-iso/n-15-rules.json][n-15-rules.json]]
- [[file:./var4-no-iso/n-1-rules.json][n-1-rules.json]]
- [[file:./var4-no-iso/n-20-rules.json][n-20-rules.json]]
- [[file:./var4-no-iso/n-25-rules.json][n-25-rules.json]]
- [[file:./var4-no-iso/n-2-rules.json][n-2-rules.json]]
- [[file:./var4-no-iso/n-30-rules.json][n-30-rules.json]]
- [[file:./var4-no-iso/n-35-rules.json][n-35-rules.json]]
- [[file:./var4-no-iso/n-3-rules.json][n-3-rules.json]]
- [[file:./var4-no-iso/n-40-rules.json][n-40-rules.json]]
- [[file:./var4-no-iso/n-45-rules.json][n-45-rules.json]]
- [[file:./var4-no-iso/n-4-rules.json][n-4-rules.json]]
- [[file:./var4-no-iso/n-50-rules.json][n-50-rules.json]]
- [[file:./var4-no-iso/n-55-rules.json][n-55-rules.json]]
- [[file:./var4-no-iso/n-5-rules.json][n-5-rules.json]]
- [[file:./var4-no-iso/n-60-rules.json][n-60-rules.json]]
- [[file:./var4-no-iso/n-65-rules.json][n-65-rules.json]]
- [[file:./var4-no-iso/n-6-rules.json][n-6-rules.json]]
- [[file:./var4-no-iso/n-70-rules.json][n-70-rules.json]]
- [[file:./var4-no-iso/n-75-rules.json][n-75-rules.json]]
- [[file:./var4-no-iso/n-7-rules.json][n-7-rules.json]]
- [[file:./var4-no-iso/n-80-rules.json][n-80-rules.json]]
- [[file:./var4-no-iso/n-85-rules.json][n-85-rules.json]]
- [[file:./var4-no-iso/n-8-rules.json][n-8-rules.json]]
- [[file:./var4-no-iso/n-90-rules.json][n-90-rules.json]]
- [[file:./var4-no-iso/n-95-rules.json][n-95-rules.json]]
- [[file:./var4-no-iso/n-9-rules.json][n-9-rules.json]]

**** Scrape data from json files
#+NAME: rule-data
#+begin_src python :var fs=rules-files :results value table
import json
table = [["N", "Vars", "Vec Size", "Time", "Num Rules"]]
table += [None]
for f in fs:
    with open(f[0], "r") as f:
        j = json.load(f)
        row = []
        row.append(j["params"]["rules_to_take"])
        row.append(j["params"]["variables"])
        row.append(j["params"]["vector_size"])
        row.append(j["time"])
        row.append(j["num_rules"])
        table.append(row)
return table
#+end_src

#+RESULTS: rule-data
|   N | Vars | Vec Size |          Time | Num Rules |
|-----+------+----------+---------------+-----------|
|   1 |    4 |        2 | 147.681476622 |       107 |
|   2 |    4 |        2 |  119.67963924 |        19 |
|   3 |    4 |        2 |  79.138159071 |        19 |
|   4 |    4 |        2 |  64.584728276 |        19 |
|   5 |    4 |        2 |  65.108601204 |        19 |
|   6 |    4 |        2 |  19.283881524 |        19 |
|   7 |    4 |        2 |  19.580199898 |        19 |
|   8 |    4 |        2 |  58.803516416 |        19 |
|   9 |    4 |        2 |  65.124658285 |        19 |
|  10 |    4 |        2 |  134.74147279 |        19 |
|  15 |    4 |        2 |   51.22335748 |        19 |
|  20 |    4 |        2 |  51.184862974 |        19 |
|  25 |    4 |        2 |   9.857465921 |        19 |
|  30 |    4 |        2 |   9.859247944 |        19 |
|  35 |    4 |        2 |   9.962592065 |        19 |
|  40 |    4 |        2 |   9.982694353 |        19 |
|  45 |    4 |        2 |  10.064010994 |        19 |
|  50 |    4 |        2 |  10.154156085 |        19 |
|  55 |    4 |        2 |  10.069690947 |        19 |
|  60 |    4 |        2 |   9.882527209 |        19 |
|  65 |    4 |        2 |   9.882128155 |        19 |
|  70 |    4 |        2 |   9.911815332 |        19 |
|  75 |    4 |        2 |   10.03678034 |        19 |
|  80 |    4 |        2 |   9.942031503 |        19 |
|  85 |    4 |        2 |   9.853525752 |        19 |
|  90 |    4 |        2 |   9.983949492 |        19 |
|  95 |    4 |        2 |   9.887742557 |        19 |
| 100 |    4 |        2 |  14.879831014 |        19 |

Interesting that for all params besides =N=1=, we get 19 rules. This suggests that the drastic reduction with the =iso-add= rule is not as significant as I thought previously.

**** Plot Times

#+header: :width 800 :height 600
#+begin_src R :var rules=rule-data :colnames yes :session graphics :results graphics file :file time.png
library(tidyverse)
colnames(rules) <- c("N", "Vars", "Vec Size", "Time", "Num_Rules")

ggplot(data = rules) + 
  geom_col(mapping = aes(x = factor(N), y = Time)) +
  theme(legend.position = "top")
#+end_src

#+RESULTS:
[[file:../time.png]]

**** Print out rules in a pretty format

#+begin_src python :results value table
import json

template = "rulesets/var4-no-iso/n-{}-rules.json"
ns = [3, 5]
table = []
for n in ns:
    with open(template.format(n), "r") as f:
        j = json.load(f)
        for eq in j["eqs"]:
            arrow = ""
            if eq["bidirectional"]:
                arrow = "<=>"
            else:
                arrow = "=>"
                table.append([n, "{} {} {}".format(eq["lhs"], arrow, eq["rhs"])])
return table 
#+end_src

#+RESULTS:
| 3 | (VecMul (VecMul ?a ?b) (VecMul ?c ?d)) <=> (VecMul (VecMul ?d ?a) (VecMul ?c ?b)) |
| 3 | (VecAdd (VecAdd ?a ?b) (VecAdd ?c ?d)) => (VecAdd (VecAdd ?a ?c) (VecAdd ?b ?d))  |
| 3 | (+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?c ?a) (+ ?b ?d))                               |
| 3 | (* (* ?a ?b) (* ?c ?d)) <=> (* (* ?d ?a) (* ?b ?c))                               |
| 3 | (VecMul (Vec ?a ?b) (Vec ?c ?d)) => (VecMul (Vec ?c ?b) (Vec ?a ?d))              |
| 3 | (VecAdd (Vec ?a ?b) (Vec ?c ?d)) => (VecAdd (Vec ?c ?b) (Vec ?a ?d))              |
| 3 | (VecMul (Vec ?a ?b) (Vec ?c ?d)) <=> (Vec (* ?a ?c) (* ?b ?d))                    |
| 3 | (VecAdd (Vec ?a ?b) (Vec ?c ?d)) <=> (Vec (+ ?a ?c) (+ ?d ?b))                    |
| 3 | (VecMul ?a (VecMul ?b ?c)) <=> (VecMul (VecMul ?a ?c) ?b)                         |
| 3 | (VecAdd ?a (VecAdd ?b ?c)) => (VecAdd ?b (VecAdd ?a ?c))                          |
| 3 | (VecMul ?a (VecAdd ?b ?c)) <=> (VecAdd (VecMul ?a ?b) (VecMul ?a ?c))             |
| 3 | (+ (* ?a ?b) (* ?b ?c)) <=> (* ?b (+ ?a ?c))                                      |
| 3 | (* ?a ?b) => (* ?b ?a)                                                            |
| 3 | (VecMul ?a ?b) => (VecMul ?b ?a)                                                  |
| 3 | (VecAdd ?a ?b) => (VecAdd ?b ?a)                                                  |
| 3 | (+ ?a ?b) => (+ ?b ?a)                                                            |
| 3 | ?a <=> (* 1 ?a)                                                                   |
| 3 | ?a <=> (+ 0 ?a)                                                                   |
| 3 | (* ?a 0) => 0                                                                     |
| 5 | (VecMul (VecMul ?a ?b) (VecMul ?c ?d)) => (VecMul (VecMul ?a ?c) (VecMul ?b ?d))  |
| 5 | (VecAdd (VecAdd ?a ?b) (VecAdd ?c ?d)) => (VecAdd (VecAdd ?a ?c) (VecAdd ?b ?d))  |
| 5 | (+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?c ?a) (+ ?b ?d))                               |
| 5 | (* (* ?a ?b) (* ?c ?d)) <=> (* (* ?d ?a) (* ?b ?c))                               |
| 5 | (VecMul (Vec ?a ?b) (Vec ?c ?d)) => (VecMul (Vec ?a ?d) (Vec ?c ?b))              |
| 5 | (VecAdd (Vec ?a ?b) (Vec ?c ?d)) => (VecAdd (Vec ?c ?b) (Vec ?a ?d))              |
| 5 | (VecMul (Vec ?a ?b) (Vec ?c ?d)) <=> (Vec (* ?a ?c) (* ?b ?d))                    |
| 5 | (VecAdd (Vec ?a ?b) (Vec ?c ?d)) <=> (Vec (+ ?a ?c) (+ ?b ?d))                    |
| 5 | (VecMul ?a (VecMul ?b ?c)) => (VecMul ?b (VecMul ?a ?c))                          |
| 5 | (VecAdd ?a (VecAdd ?b ?c)) => (VecAdd ?b (VecAdd ?a ?c))                          |
| 5 | (VecMul ?a (VecAdd ?b ?c)) <=> (VecAdd (VecMul ?a ?b) (VecMul ?a ?c))             |
| 5 | (+ (* ?a ?b) (* ?c ?a)) <=> (* (+ ?b ?c) ?a)                                      |
| 5 | (* ?a ?b) => (* ?b ?a)                                                            |
| 5 | (VecMul ?a ?b) => (VecMul ?b ?a)                                                  |
| 5 | (VecAdd ?a ?b) => (VecAdd ?b ?a)                                                  |
| 5 | (+ ?a ?b) => (+ ?b ?a)                                                            |
| 5 | ?a <=> (* ?a 1)                                                                   |
| 5 | ?a <=> (+ 0 ?a)                                                                   |
| 5 | (* 0 ?a) => 0                                                                     |

*** Next

- I want to run the same ablation but with the =vec-add= isomorphism rule.
- See if the =vec-add= rule is special in some way or if you can get a similar effect with lots of different rules.
- verify that there is an effect where the number of rules decline dramatically when the =vec-add= rule is added. It might just be the variable number that's important.
- [X] Fix the validator so that =lt= and =div= rules work.

* Effect of Rules

** How do seed rules effect the number of rules generated?
:PROPERTIES:
:header-args: :dir (magit-toplevel)
:END:

*** Setup
For these experiments, we are using the following constants:
#+name: constants
#+begin_src json
"constants": [
    {
    "type": "int",
    "value": 0
},
    {
    "type": "int",
    "value": 1
}
]
#+end_src

and the following operations:
#+name: operations
#+begin_src json :noweb yes
"binops": ["+", "*"],
"use_vector": false,
"vector_binops": []
#+end_src

We are using the following command line settings:
#+name: run-dios
#+begin_src bash :var config="dios-config.json" rules="rules.json" :async :results output
cargo run --manifest-path ruler/Cargo.toml --release --bin dios -- synth \
      --num-fuzz 4 \
      --iters 2 \
      --variables 4 \
      --eqsat-iter-limit 2 \
      --vector-size 2 \
      --abs-timeout 240 \
      --outfile $rules \
      --dios-config $config
#+end_src

#+begin_src emacs-lisp :export code
(defun run-dios (config rules &optional stdout-buf stderr-buf)
  (let ((cmd (list "cargo run --manifest-path ruler/Cargo.toml"
		   "--release" "--bin dios" "--"
		   "synth"
		   "--num-fuzz" "4"
		   "--iters" "2"
		   "--variables" "2"
		   "--eqsat-iter-limit" "2"
		   "--vector-size" "2"
		   "--abs-timeout" "240"
		   "--outfile" rules
		   "--dios-config" config)))
    (shell-command (string-join cmd " ") stdout-buf stderr-buf)
    (with-current-buffer stdout-buf
      (buffer-substring (point-min) (point-max)))))
#+end_src

#+RESULTS:
: run-dios

*** Experiments
**** Baseline
Let's first establish a baseline. What are the rules we generate with no seed rules?
#+NAME: baseline-config
#+begin_src json :results file silent :file configs/baseline.json :noweb yes
{
	<<constants>>,
    "seed_rules": [],
	<<operations>>
}
#+end_src

#+call: run-dios(config="configs/baseline.json")

#+RESULTS:
#+begin_example
Learned 16 rules in 1.498129494
(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?c ?a) (+ ?b ?d))
(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?d ?b) (* ?a ?c))
(+ ?a (+ ?b ?c)) <=> (+ ?b (+ ?a ?c))
(* ?a (* ?b ?c)) <=> (* ?c (* ?a ?b))
(+ (* ?a ?b) (* ?a ?c)) <=> (* ?a (+ ?b ?c))
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(+ 0 (* ?a (+ ?b ?c))) <=> (* ?a (+ ?b ?c))
(+ ?a (* ?b ?c)) <=> (+ (* ?b ?c) (+ 0 ?a))
(+ 0 (* ?a (* ?b ?c))) <=> (* ?a (* ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(* ?a ?b) <=> (* ?b (* 1 ?a))
(+ ?a ?b) <=> (+ 0 (+ ?a ?b))
(+ ?a ?a) <=> (* ?a 2)
(* 0 ?a) => 0
(+ 0 ?a) <=> (* 1 ?a)
Learned 16 rules in 1.498129494
#+end_example

**** Commutativity

I wonder what happens if we start with commutativity rules.

#+begin_src json :results file silent :file configs/commutativity.json :noweb yes
{
	<<constants>>,
    "seed_rules": [
	{
	"lhs": "(+ ?a ?b)",
	"rhs": "(+ ?b ?a)"
    },
	{
	"lhs": "(* ?a ?b)",
	"rhs": "(* ?b ?a)"
    }
    ],
	<<operations>>
}
#+end_src

#+call: run-dios(config="configs/commutativity.json")

#+NAME: commute
#+RESULTS:
#+begin_example
Learned 16 rules in 1.044258646
(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?a ?c) (* ?b ?d))
(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?c ?a) (+ ?b ?d))
(+ ?a (+ ?b ?c)) <=> (+ ?c (+ ?a ?b))
(* ?a (* ?b ?c)) <=> (* ?b (* ?a ?c))
(+ (* ?a ?b) (* ?a ?c)) <=> (* ?a (+ ?b ?c))
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(* ?a (+ ?b ?c)) <=> (* (+ 0 ?a) (+ ?b ?c))
(+ ?a (* ?b ?c)) <=> (+ 0 (+ ?a (* ?b ?c)))
(+ 0 (* ?a (* ?b ?c))) <=> (* ?a (* ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(+ ?a ?b) <=> (+ 0 (+ ?a ?b))
(+ 0 (* ?a ?b)) <=> (* ?a ?b)
(+ ?a ?a) <=> (* ?a 2)
(* ?a 0) => 0
(+ 0 ?a) <=> (* 1 ?a)
Learned 16 rules in 1.044258646
#+end_example

These rules don't seem to change the rules generated.

**** Associativity

What about adding an associativity rule?

#+begin_src json :results file silent :file configs/associativity.json :noweb yes
{
	<<constants>>,
    "seed_rules": [
	{
	"lhs": "(+ (+ ?a ?b) ?c)",
	"rhs": "(+ ?a (+ ?b ?c))"
    },
	{
	"lhs": "(* (* ?a ?b) ?c)",
	"rhs": "(* ?a (* ?b ?c))"
    }
    ],
	<<operations>>
}
#+end_src

#+call: run-dios(config="configs/associativity.json")

#+RESULTS:
#+begin_example
Learned 13 rules in 1.599011
(* ?a (* ?b ?c)) <=> (* (* ?a ?b) ?c)
(+ ?a (+ ?b ?c)) <=> (+ (+ ?a ?b) ?c)
(+ (* ?a ?b) (* ?a ?c)) <=> (* (+ ?c ?b) ?a)
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(+ ?a (* ?b ?c)) <=> (+ ?a (* ?b (+ 0 ?c)))
(+ 0 (* ?a (+ ?b ?c))) <=> (* ?a (+ ?b ?c))
(+ 0 (* ?a (* ?b ?c))) <=> (* ?a (* ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(+ ?a ?b) <=> (+ ?b (+ 0 ?a))
(* ?a ?b) <=> (* ?b (+ 0 ?a))
(* 0 ?a) => 0
(+ 0 ?a) <=> (* 1 ?a)
Learned 13 rules in 1.599011
#+end_example

So this generated three fewer rules than before. I wonder what rules are different.

#+begin_src bash :results verbatim :var a=assoc b=baseline :wrap SRC diff :exports results
diff -u --label "assoc" <(echo "$a") --label "basline" <(echo "$b")
echo ""
#+end_src

#+RESULTS:
#+begin_SRC diff
--- assoc
+++ basline
@@ -2,13 +2,16 @@
(+ 0 ?a) <=> (* 1 ?a)
(+ 0 (* ?a (* ?b ?c))) <=> (* ?a (* ?b ?c))
(+ 0 (* ?a (+ ?b ?c))) <=> (* ?a (+ ?b ?c))
-(+ (* ?a ?b) (* ?a ?c)) <=> (* (+ ?c ?b) ?a)
-(* ?a ?b) <=> (* ?b (+ 0 ?a))
-(+ ?a ?b) <=> (+ ?b (+ 0 ?a))
+(+ ?a ?a) <=> (* ?a 2)
+(+ ?a ?b) <=> (+ 0 (+ ?a ?b))
+(+ (* ?a ?b) (* ?a ?c)) <=> (* ?a (+ ?b ?c))
+(* ?a ?b) <=> (* ?b (* 1 ?a))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
-(+ ?a (* ?b ?c)) <=> (+ ?a (* ?b (+ 0 ?c)))
-(* ?a (* ?b ?c)) <=> (* (* ?a ?b) ?c)
-(+ ?a (+ ?b ?c)) <=> (+ (+ ?a ?b) ?c)
+(+ ?a (+ ?b ?c)) <=> (+ ?b (+ ?a ?c))
+(+ ?a (* ?b ?c)) <=> (+ (* ?b ?c) (+ 0 ?a))
+(* ?a (* ?b ?c)) <=> (* ?c (* ?a ?b))
+(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?c ?a) (+ ?b ?d))
+(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?d ?b) (* ?a ?c))


#+end_SRC

**** Commute + Associativity

#+begin_src json :results file silent :file configs/commute_assoc.json :noweb yes
{
	<<constants>>,
    "seed_rules": [
	{
	"lhs": "(+ (+ ?a ?b) ?c)",
	"rhs": "(+ ?a (+ ?b ?c))"
    },
	{
	"lhs": "(* (* ?a ?b) ?c)",
	"rhs": "(* ?a (* ?b ?c))"
    },
	{
	"lhs": "(+ ?a ?b)",
	"rhs": "(+ ?b ?a)"
    },
	{
	"lhs": "(* ?a ?b)",
	"rhs": "(* ?b ?a)"
    }
    ],
	<<operations>>
}
#+end_src

#+call: run-dios(config="configs/commute_assoc.json")

#+RESULTS:
#+begin_example
Learned 13 rules in 1.289977023
(* ?a (* ?b ?c)) <=> (* (* ?a ?b) ?c)
(+ ?a (+ ?b ?c)) <=> (+ (+ ?a ?b) ?c)
(+ (* ?a ?b) (* ?c ?a)) <=> (* (+ ?c ?b) ?a)
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(* ?a (+ ?b ?c)) <=> (* ?a (+ ?b (+ 0 ?c)))
(+ ?a (* ?b ?c)) <=> (+ ?a (* ?b (+ 0 ?c)))
(+ 0 (* ?a (* ?b ?c))) <=> (* ?a (* ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(+ ?a ?b) <=> (+ 0 (+ ?a ?b))
(* ?a ?b) <=> (* ?b (+ 0 ?a))
(* ?a 0) => 0
(+ 0 ?a) <=> (* 1 ?a)
Learned 13 rules in 1.289977023
#+end_example

#+begin_src bash :results verbatim :var a=assoc b=assoc_commute :wrap SRC diff :exports results
diff -u --label "base" <(echo "$a") --label "assoc+commute" <(echo "$b")
echo ""
#+end_src

#+RESULTS:
#+begin_SRC diff
--- base
+++ assoc+commute
@@ -1,14 +1,14 @@
-(* 0 ?a) => 0
(+ 0 ?a) <=> (* 1 ?a)
(+ 0 (* ?a (* ?b ?c))) <=> (* ?a (* ?b ?c))
-(+ 0 (* ?a (+ ?b ?c))) <=> (* ?a (+ ?b ?c))
-(+ (* ?a ?b) (* ?a ?c)) <=> (* (+ ?c ?b) ?a)
+(* ?a 0) => 0
+(+ ?a ?b) <=> (+ 0 (+ ?a ?b))
(* ?a ?b) <=> (* ?b (+ 0 ?a))
-(+ ?a ?b) <=> (+ ?b (+ 0 ?a))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
+(* ?a (+ ?b ?c)) <=> (* ?a (+ ?b (+ 0 ?c)))
(+ ?a (* ?b ?c)) <=> (+ ?a (* ?b (+ 0 ?c)))
(* ?a (* ?b ?c)) <=> (* (* ?a ?b) ?c)
(+ ?a (+ ?b ?c)) <=> (+ (+ ?a ?b) ?c)
+(+ (* ?a ?b) (* ?c ?a)) <=> (* (+ ?c ?b) ?a)


#+end_SRC

**** Commute + zero rule

#+begin_src json :results file silent :file configs/commute_zero.json :noweb yes
{
	<<constants>>,
    "seed_rules": [
	{
	"lhs": "(+ ?a ?b)",
	"rhs": "(+ ?b ?a)"
    },
	{
	"lhs": "(* ?a ?b)",
	"rhs": "(* ?b ?a)"
    },
	{
	"lhs": "(+ ?a i0)",
	"rhs": "?a"
    }
    ],
	<<operations>>
}
#+end_src

#+call: run-dios(config="configs/commute_zero.json")

#+name: commute_zero
#+RESULTS:
#+begin_example
Learned 12 rules in 0.96681023
(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?a ?c) (* ?b ?d))
(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?a ?d) (+ ?c ?b))
(* ?a (* ?b ?c)) <=> (* ?c (* ?a ?b))
(+ (* ?a ?b) (* ?a ?c)) <=> (* ?a (+ ?b ?c))
(* ?a (* ?b ?c)) <=> (* ?c (* (* ?b ?a) 1))
(+ ?a (+ ?b ?c)) <=> (+ ?c (+ ?a (* 1 ?b)))
(+ ?a (* ?b ?c)) <=> (+ (* 1 ?a) (* ?b ?c))
(+ ?a (+ ?b ?c)) <=> (+ ?b (+ ?a (* 1 ?c)))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
?a <=> (+ ?a 0)
(* ?a 0) => 0
Learned 12 rules in 0.96681023
#+end_example

#+begin_src bash :noweb yes :results output verbatim
<<run-dios>>
#+end_src

#+begin_src bash :results verbatim :var a=commute_zero b=assoc_commute :wrap SRC diff :exports results

diff -u --label "commute_zero" <(echo "$a") --label "assoc+commute" <(echo "$b")
echo ""
#+end_src

#+RESULTS:
#+begin_SRC diff
--- commute_zero
+++ assoc+commute
@@ -1,13 +1,14 @@
+(+ 0 ?a) <=> (* 1 ?a)
+(+ 0 (* ?a (* ?b ?c))) <=> (* ?a (* ?b ?c))
(* ?a 0) => 0
-?a <=> (+ ?a 0)
-(+ (* ?a ?b) (* ?a ?c)) <=> (* ?a (+ ?b ?c))
+(+ ?a ?b) <=> (+ 0 (+ ?a ?b))
+(* ?a ?b) <=> (* ?b (+ 0 ?a))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
-(+ ?a (* ?b ?c)) <=> (+ (* 1 ?a) (* ?b ?c))
-(+ ?a (+ ?b ?c)) <=> (+ ?b (+ ?a (* 1 ?c)))
-(+ ?a (+ ?b ?c)) <=> (+ ?c (+ ?a (* 1 ?b)))
-(* ?a (* ?b ?c)) <=> (* ?c (* ?a ?b))
-(* ?a (* ?b ?c)) <=> (* ?c (* (* ?b ?a) 1))
-(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?a ?c) (* ?b ?d))
-(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?a ?d) (+ ?c ?b))
+(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
+(* ?a (+ ?b ?c)) <=> (* ?a (+ ?b (+ 0 ?c)))
+(+ ?a (* ?b ?c)) <=> (+ ?a (* ?b (+ 0 ?c)))
+(* ?a (* ?b ?c)) <=> (* (* ?a ?b) ?c)
+(+ ?a (+ ?b ?c)) <=> (+ (+ ?a ?b) ?c)
+(+ (* ?a ?b) (* ?c ?a)) <=> (* (+ ?c ?b) ?a)


#+end_SRC

So this shows that you can successfully get rid of these "seemingly useless" zero rules. Examples of such rules:

#+begin_example
(+ ?a ?b) <=> (+ 0 (+ ?a ?b))
(* ?a ?b) <=> (* ?b (+ 0 ?a))
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(* ?a (+ ?b ?c)) <=> (* ?a (+ ?b (+ 0 ?c)))
(+ ?a (* ?b ?c)) <=> (+ ?a (* ?b (+ 0 ?c)))
#+end_example

**** Commute + zero + one

#+begin_src json :results file silent :file configs/commute_zero_one.json :noweb yes
{
	<<constants>>,
    "seed_rules": [
	{
	"lhs": "(+ ?a ?b)",
	"rhs": "(+ ?b ?a)"
    },
	{
	"lhs": "(* ?a ?b)",
	"rhs": "(* ?b ?a)"
    },
	{
	"lhs": "(+ ?a i0)",
	"rhs": "?a"
    },
	{
	"lhs": "(* ?a i1)",
	"rhs": "?a"
    }
    ],
	<<operations>>
}
#+end_src

#+call: run-dios(config="configs/commute_zero_one.json")

#+RESULTS:
#+begin_example
Learned 8 rules in 1.151370773
(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?c ?a) (* ?b ?d))
(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?d ?a) (+ ?c ?b))
(+ (* ?a ?b) (* ?b ?c)) <=> (* ?b (+ ?a ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
?a <=> (* ?a 1)
?a <=> (+ ?a 0)
(* ?a 0) => 0
Learned 8 rules in 1.151370773
#+end_example

By seeding various rules, we can get the output rules to be more "interesting" and seemingly less redundant. Now let's try and quantify some of what it means for a rule to be "more interesting".

** How do different rules effect how the size of the Diospyros egraph grows over time?
:PROPERTIES:
:header-args: :dir (magit-toplevel)
:END:

*** Setup
Firstly, how do we record the size of the egraph over time.

Using the =with hook= method on =runner=.

*** Size of graph by # of iterations

#+name: eval_benchmarks
#+begin_src shell :async :results output table
python3 evaluation/eval_benchmarks.py \
	--timeout 20 \
	--skiprun \
	--test \
	-o test-result \
    | grep "Egraph big big?" \
    | cut -d' ' -f 4
#+end_src

**** Baseline

#+call: run-dios(config="configs/baseline.json")

#+RESULTS:
#+begin_example
Learned 15 rules in 1.526623833
(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?c ?a) (+ ?b ?d))
(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?d ?b) (* ?a ?c))
(+ ?a (+ ?b ?c)) <=> (+ ?b (+ ?a ?c))
(* ?a (* ?b ?c)) <=> (* ?c (* ?a ?b))
(+ (* ?a ?b) (* ?a ?c)) <=> (* ?a (+ ?b ?c))
(* ?a (* ?b ?c)) <=> (* 1 (* ?a (* ?b ?c)))
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(+ ?a (+ 0 (* ?b ?c))) <=> (+ ?a (* ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(* ?a ?b) <=> (* ?b (* 1 ?a))
(+ ?a ?b) <=> (+ 0 (+ ?a ?b))
(+ ?a ?a) <=> (* ?a 2)
(* 0 ?a) => 0
(+ 0 ?a) <=> (* 1 ?a)
Learned 15 rules in 1.526623833
#+end_example

#+call: eval_benchmarks()

#+name: baseline_data
#+RESULTS:
|   29 |
|   77 |
|  401 |
| 1387 |
| 1743 |
| 1599 |
| 1616 |
| 1693 |
| 1768 |
| 3990 |
| 3834 |
| 3845 |
| 3849 |
| 3849 |
| 3849 |
| 9647 |
| 9687 |
| 9687 |
| 9687 |
| 9687 |

**** Commutativity

#+call: run-dios(config="configs/commutativity.json")
#+call: eval_benchmarks()

#+name: commute_data
#+RESULTS:
|    29 |
|   111 |
|   526 |
|  1479 |
|  2270 |
|  2125 |
|  2125 |
|  2761 |
|  2905 |
|  2869 |
|  2861 |
|  2861 |
|  2861 |
|  2861 |
|  6178 |
|  6178 |
|  6178 |
|  6178 |
| 66018 |
#+end_example

**** Associativity

#+call: run-dios(config="configs/associativity.json")

#+RESULTS:
#+begin_example
Learned 13 rules in 1.61879475
(* ?a (* ?b ?c)) <=> (* (* ?a ?b) ?c)
(+ ?a (+ ?b ?c)) <=> (+ (+ ?a ?b) ?c)
(+ (* ?a ?b) (* ?a ?c)) <=> (* (+ ?c ?b) ?a)
(* ?a (* ?b ?c)) <=> (* ?c (* (* 1 ?b) ?a))
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(+ ?a (* ?b ?c)) <=> (+ ?a (* ?b (+ 0 ?c)))
(+ 0 (* ?a (+ ?b ?c))) <=> (* ?a (+ ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(* ?a ?b) <=> (* (* 1 ?a) ?b)
(+ ?a ?b) <=> (+ 0 (+ ?a ?b))
(* 0 ?a) => 0
(+ 0 ?a) <=> (* 1 ?a)
Learned 13 rules in 1.61879475
#+end_example

#+call: eval_benchmarks()

#+name: assoc_data
#+RESULTS:
|    29 |
|    79 |
|   465 |
|  1497 |
|  1783 |
|  1544 |
|  2216 |
|  2667 |
|  2956 |
|  5010 |
|  4303 |
|  4303 |
|  4303 |
|  4356 |
|  4356 |
|  4356 |
|  6277 |
|  6277 |
|  6277 |
|  6277 |
|  6277 |
|  6277 |
|  6277 |
|  6277 |
| 24093 |
| 24093 |
| 24093 |
| 24093 |
| 24093 |

**** Commute + Associativity

#+call: run-dios(config="configs/commute_assoc.json")

#+RESULTS:
#+begin_example
Learned 13 rules in 1.240857833
(* ?a (* ?b ?c)) <=> (* (* ?a ?b) ?c)
(+ ?a (+ ?b ?c)) <=> (+ (+ ?a ?b) ?c)
(+ (* ?a ?b) (* ?c ?a)) <=> (* (+ ?c ?b) ?a)
(* ?a (* ?b ?c)) <=> (* 1 (* ?a (* ?b ?c)))
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(* ?a (+ ?b ?c)) <=> (* ?a (+ ?b (+ 0 ?c)))
(+ ?a (* ?b ?c)) <=> (+ (+ 0 ?a) (* ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(+ ?a ?b) <=> (+ ?b (+ 0 ?a))
(* ?a ?b) <=> (* ?b (+ 0 ?a))
(* ?a 0) => 0
(+ 0 ?a) <=> (* 1 ?a)
Learned 13 rules in 1.240857833
#+end_example

#+call: eval_benchmarks()

#+name: commute_assoc_data
#+RESULTS:
|   29 |
|   77 |
|  531 |
| 1134 |
| 1501 |
| 1622 |
| 1578 |
| 1593 |
| 1623 |
| 2320 |
| 2388 |
| 2388 |
| 3482 |
| 3482 |
| 3482 |
| 7324 |
| 7324 |
| 7324 |

**** Commute + zero

#+call: run-dios(config="configs/commute_zero.json")

#+RESULTS:
#+begin_example
Learned 10 rules in 1.140422958
(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?a ?c) (* ?b ?d))
(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?a ?d) (+ ?c ?b))
(* ?a (* ?b ?c)) <=> (* ?c (* ?a ?b))
(+ (* ?a ?b) (* ?a ?c)) <=> (* ?a (+ ?b ?c))
(* ?a (* ?b ?c)) <=> (* ?c (* (* ?b ?a) 1))
(+ ?a (+ ?b ?c)) <=> (+ (* 1 ?a) (+ ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
?a <=> (+ ?a 0)
(* ?a 0) => 0
Learned 10 rules in 1.140422958
#+end_example

#+call: eval_benchmarks()

#+name: commute_zero_data
#+RESULTS:
|    29 |
|    82 |
|   341 |
|   996 |
|  1890 |
|  2178 |
|  2202 |
|  2202 |
|  2202 |
|  2202 |
|  2433 |
|  2356 |
|  2356 |
|  2356 |
|  2356 |
|  2356 |
|  2356 |
|  2356 |
| 70636 |

**** Commute + zero + one

#+call: run-dios(config="configs/commute_zero_one.json")

#+RESULTS:
#+begin_example
Learned 8 rules in 1.07546475
(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?c ?a) (* ?b ?d))
(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?d ?a) (+ ?c ?b))
(+ (* ?a ?b) (* ?b ?c)) <=> (* ?b (+ ?a ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
?a <=> (* ?a 1)
?a <=> (+ ?a 0)
(* ?a 0) => 0
Learned 8 rules in 1.07546475
#+end_example

#+call: eval_benchmarks()

#+name: commute_zero_one_data
#+RESULTS:
|    29 |
|   111 |
|   526 |
|  1479 |
|  2270 |
|  2125 |
|  2125 |
|  2761 |
|  2905 |
|  2869 |
|  2861 |
|  2861 |
|  2861 |
|  2861 |
|  6178 |
|  6178 |
|  6178 |
|  6178 |
| 66018 |

**** Pictures!

#+header: :width 600 :height 500
#+header: :var baseline=baseline_data
#+header: :var commute=commute_data
#+header: :var assoc=assoc_data
#+header: :var commute_assoc=commute_assoc_data
#+header: :var commute_zero=commute_zero_data
#+header: :var commute_zero_one=commute_zero_one_data
#+begin_src R :session graphics :results graphics file :file size.png
library(tidyverse)

max_rows <- max(nrow(baseline),
                nrow(commute),
                nrow(assoc),
                nrow(commute_assoc),
                nrow(commute_zero),
                nrow(commute_zero_one))

data <- data.frame("baseline" = c(baseline$V1, rep(NA, max_rows - nrow(baseline))),
                   "commute" = c(commute$V1, rep(NA, max_rows - nrow(commute))),
                   "assoc" = c(assoc$V1, rep(NA, max_rows - nrow(assoc))),
                   "commute_assoc" =
                     c(commute_assoc$V1, rep(NA, max_rows - nrow(commute_assoc))),
                   "commute_zero" =
                     c(commute_zero$V1, rep(NA, max_rows - nrow(commute_zero))),
                   "commute_zero_one" =
                     c(commute_zero_one$V1, rep(NA, max_rows - nrow(commute_zero_one))))

## colnames(baseline) <- c("Size")


ggplot(data = data,
       mapping = aes(x = as.numeric(seq(1, max_rows)))) +
  geom_line(mapping = aes(y = baseline, color = "baseline"), size = 1.2) +
  geom_line(mapping = aes(y = commute, color = "commute"), size = 1.2) +
  geom_line(mapping = aes(y = assoc, color = "assoc"), size = 1.2) +
  geom_line(mapping = aes(y = commute_assoc, color = "commute_assoc"), size = 1.2) +
  geom_line(mapping = aes(y = commute_zero, color = "commute_zero"), size = 1.2) +
  geom_line(mapping = aes(y = commute_zero_one, color = "commute_zero_one"), size = 1.2) +
  theme(legend.position = "bottom")
#+end_src

#+RESULTS:
[[file:../size.png]]

*** Cost of best program by # of iterations

#+name: iteration_exper
#+begin_src shell :async :results output table
python3 evaluation/eval_benchmarks.py \
	--timeout 20 \
	--skiprun \
	--test \
	-o test-result \
    | grep "Egraph cost?" \
    | cut -d' ' -f 3
#+end_src

**** Baseline

#+call: run-dios(config="configs/baseline.json")

#+RESULTS:
#+begin_example
Learned 15 rules in 1.413282208
(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?c ?a) (+ ?b ?d))
(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?d ?b) (* ?a ?c))
(+ ?a (+ ?b ?c)) <=> (+ ?b (+ ?a ?c))
(* ?a (* ?b ?c)) <=> (* ?c (* ?a ?b))
(+ (* ?a ?b) (* ?a ?c)) <=> (* ?a (+ ?b ?c))
(* ?a (* ?b ?c)) <=> (* 1 (* ?a (* ?b ?c)))
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(+ ?a (+ 0 (* ?b ?c))) <=> (+ ?a (* ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(* ?a ?b) <=> (* ?b (* 1 ?a))
(+ ?a ?b) <=> (+ 0 (+ ?a ?b))
(+ ?a ?a) <=> (* ?a 2)
(* 0 ?a) => 0
(+ 0 ?a) <=> (* 1 ?a)
Learned 15 rules in 1.413282208
#+end_example

#+call: iteration_exper()

#+name: baseline_iter_data
#+RESULTS:
|  503.5590000000001 |
|            502.659 |
|  501.6600000000001 |
|             492.76 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |
| 492.56199999999995 |

**** Commutativity

#+call: run-dios(config="configs/commutativity.json")

#+RESULTS:
#+begin_example
Learned 15 rules in 1.1665614579999999
(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?a ?c) (* ?b ?d))
(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?c ?a) (+ ?b ?d))
(+ ?a (+ ?b ?c)) <=> (+ ?c (+ ?a ?b))
(* ?a (* ?b ?c)) <=> (* ?b (* ?a ?c))
(+ (* ?a ?b) (* ?a ?c)) <=> (* ?a (+ ?b ?c))
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(+ 0 (* ?a (* ?b ?c))) <=> (* ?a (* ?b ?c))
(+ ?a (* ?b ?c)) <=> (+ 0 (+ ?a (* ?b ?c)))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(+ ?a ?b) <=> (+ 0 (+ ?a ?b))
(* ?a ?b) <=> (* ?b (+ 0 ?a))
(+ ?a ?a) <=> (* ?a 2)
(* ?a 0) => 0
(+ 0 ?a) <=> (* 1 ?a)
Learned 15 rules in 1.1665614579999999
#+end_example

#+call: iteration_exper()

#+NAME: commute_iter_data
#+RESULTS:
: fe3137315a8e18825e5f71b322044175

**** Associativity

#+call: run-dios(config="configs/associativity.json")

#+RESULTS:
#+begin_example
Learned 13 rules in 1.520162791
(* ?a (* ?b ?c)) <=> (* (* ?a ?b) ?c)
(+ ?a (+ ?b ?c)) <=> (+ (+ ?a ?b) ?c)
(+ (* ?a ?b) (* ?a ?c)) <=> (* (+ ?c ?b) ?a)
(* ?a (* ?b ?c)) <=> (* ?c (* (* 1 ?b) ?a))
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(+ ?a (* ?b ?c)) <=> (+ ?a (* ?b (+ 0 ?c)))
(+ 0 (* ?a (+ ?b ?c))) <=> (* ?a (+ ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(* ?a ?b) <=> (* (* 1 ?a) ?b)
(+ ?a ?b) <=> (+ 0 (+ ?a ?b))
(* 0 ?a) => 0
(+ 0 ?a) <=> (* 1 ?a)
Learned 13 rules in 1.520162791
#+end_example

#+call: iteration_exper()

#+NAME: assoc_iter_data
#+RESULTS:
: 981c4be7e71ef96b203d295470a7546d

**** Commute + Associativity

#+call: run-dios(config="configs/commute_assoc.json")

#+RESULTS:
#+begin_example
Learned 13 rules in 1.18981075
(* ?a (* ?b ?c)) <=> (* (* ?a ?b) ?c)
(+ ?a (+ ?b ?c)) <=> (+ (+ ?a ?b) ?c)
(+ (* ?a ?b) (* ?c ?a)) <=> (* (+ ?c ?b) ?a)
(* ?a (* ?b ?c)) <=> (* 1 (* ?a (* ?b ?c)))
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(* ?a (+ ?b ?c)) <=> (* ?a (+ ?b (+ 0 ?c)))
(+ ?a (* ?b ?c)) <=> (+ (+ 0 ?a) (* ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(+ ?a ?b) <=> (+ ?b (+ 0 ?a))
(* ?a ?b) <=> (* ?b (+ 0 ?a))
(* ?a 0) => 0
(+ 0 ?a) <=> (* 1 ?a)
Learned 13 rules in 1.18981075
#+end_example

#+call: iteration_exper()

#+NAME: commute_assoc_iter_data
#+RESULTS:
|  503.5590000000001 |
|            502.659 |
| 496.05999999999995 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |
|            492.562 |

**** Commute + zero

#+call: run-dios(config="configs/commute_zero.json")

#+RESULTS:
#+begin_example
Learned 10 rules in 1.053053791
(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?a ?c) (* ?b ?d))
(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?a ?d) (+ ?c ?b))
(* ?a (* ?b ?c)) <=> (* ?c (* ?a ?b))
(+ (* ?a ?b) (* ?a ?c)) <=> (* ?a (+ ?b ?c))
(* ?a (* ?b ?c)) <=> (* ?c (* (* ?b ?a) 1))
(+ ?a (+ ?b ?c)) <=> (+ (* 1 ?a) (+ ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
?a <=> (+ ?a 0)
(* ?a 0) => 0
Learned 10 rules in 1.053053791
#+end_example

#+call: iteration_exper()

#+NAME: commute_zero_iter_data
#+RESULTS:
| 503.5590000000001 |
|           502.659 |
| 501.6600000000001 |
|            492.76 |
|           491.566 |
|           491.566 |
|           491.566 |
|           491.566 |
|           491.566 |
|           491.566 |
|           491.566 |
|           491.566 |
|           491.566 |

**** Commute + zero + one

#+call: run-dios(config="configs/commute_zero_one.json")

#+RESULTS:
#+begin_example
Learned 8 rules in 1.06209475
(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?c ?a) (* ?b ?d))
(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?d ?a) (+ ?c ?b))
(+ (* ?a ?b) (* ?b ?c)) <=> (* ?b (+ ?a ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
?a <=> (* ?a 1)
?a <=> (+ ?a 0)
(* ?a 0) => 0
Learned 8 rules in 1.06209475
#+end_example

#+call: iteration_exper()

#+NAME: commute_zero_one_iter_data
#+RESULTS:
|  503.5590000000001 |
|            502.659 |
|  500.8620000000001 |
|            491.863 |
| 491.66499999999996 |
| 491.66499999999996 |
| 491.66499999999996 |
| 491.66499999999996 |
| 491.66499999999996 |
| 491.66499999999996 |
| 491.66499999999996 |
| 491.66499999999996 |
| 490.56399999999996 |
| 490.56399999999996 |
| 490.56399999999996 |
| 490.56399999999996 |
| 490.56399999999996 |
| 490.56399999999996 |
| 490.56399999999996 |
| 490.56399999999996 |
| 490.56399999999996 |
| 490.56399999999996 |
| 490.56399999999996 |
| 490.56399999999996 |
| 490.56399999999996 |
| 490.56399999999996 |
|            489.564 |
|            489.564 |

**** Pictures!

#+header: :width 600 :height 500
#+header: :var baseline=baseline_iter_data
#+header: :var commute=commute_iter_data
#+header: :var assoc=assoc_iter_data
#+header: :var commute_assoc=commute_assoc_iter_data
#+header: :var commute_zero=commute_zero_iter_data
#+header: :var commute_zero_one=commute_zero_one_iter_data
#+begin_src R :session graphics2 :results graphics file :file iters_conv2d.png
library(tidyverse)

max_rows <- max(nrow(baseline),
                ## nrow(commute),
                ## nrow(assoc),
                nrow(commute_assoc),
                nrow(commute_zero),
                nrow(commute_zero_one))

data <- data.frame("baseline" = c(baseline$V1, rep(NA, max_rows - nrow(baseline))),
                   ## "commute" = c(commute$V1, rep(NA, max_rows - nrow(commute))),
                   ## "assoc" = c(assoc$V1, rep(NA, max_rows - nrow(assoc))),
                   "commute_assoc" =
                     c(commute_assoc$V1, rep(NA, max_rows - nrow(commute_assoc))),
                   "commute_zero" =
                     c(commute_zero$V1, rep(NA, max_rows - nrow(commute_zero))),
                   "commute_zero_one" =
                     c(commute_zero_one$V1, rep(NA, max_rows - nrow(commute_zero_one))))


ggplot(data = data,
       mapping = aes(x = as.numeric(seq(1, max_rows))),
       log="y") +
  geom_line(mapping = aes(y = baseline, color = "baseline"), size = 1.2) +
  ## geom_line(mapping = aes(y = commute, color = "commute"), size = 1.2) +
  ## geom_line(mapping = aes(y = assoc, color = "assoc"), size = 1.2) +
  geom_line(mapping = aes(y = commute_assoc, color = "commute_assoc"), size = 1.2) +
  geom_line(mapping = aes(y = commute_zero, color = "commute_zero"), size = 1.2) +
  geom_line(mapping = aes(y = commute_zero_one, color = "commute_zero_one"), size = 1.2) +
  theme(legend.position = "bottom")
#+end_src

#+RESULTS:
[[file:../iters_conv2d.png]]

** More automated cost of best program by # of iterations
:PROPERTIES:
:header-args: :dir (magit-toplevel) :var vector_size="2"
:header-args+: :var SERVER="18.218.164.151"
:END:

*** Setup

#+name: gen-rules
#+header: :var fuzz="4"
#+header: :var iters="2"
#+header: :var variables="4"
#+header: :var eqsat_iter="2"
#+header: :var abs_timeout="240"
#+header: :var config="dios-config.json"
#+header: :var rules="rules.json"
#+begin_src bash :async :results output
cargo run --manifest-path ruler/Cargo.toml \
      --release \
      --bin dios -- synth \
      --outfile $rules \
      --dios-config $config \
      --num-fuzz $fuzz --iters $iters --variables $variables \
      --eqsat-iter-limit $eqsat_iter --vector-size $vector_size \
      --abs-timeout $abs_timeout
#+end_src

#+name: q-prod-params
#+begin_src json :results file silent :file q-prod-params
{
    "reg-size": 4
}
#+end_src

#+name: qr-decomp-params
#+begin_src json :results file silent :file qr-decomp-params
{
    "N": 3,
    "reg-size": 4
}
#+end_src

#+name: build-spec
#+begin_src bash :var bench="" :noweb yes
./dios-example-gen -w $vector_size -b "$bench" -p "$bench"-params -o "$bench"-out
#+end_src

#+name: egg-rewrite
#+begin_src sh :var bench="" rules="" :results output :cache yes
cargo run --release --manifest-path src/dios-egraphs/Cargo.toml \
      --features vec_width_2 \
      -- \
      "$bench"-out/spec.rkt \
      --no-ac \
      --rules "$rules" 3>&1 1>&2 2>&3
#+end_src

#+name: get-final-cost
#+begin_src elisp :var raw=""
(--> (split-string raw "\n")
     (--filter (string-match "Cost: " it) it)
     (--map (string-remove-prefix "Cost:" it) it)
     ;;end
     )
#+end_src

#+name: get-cost
#+begin_src elisp :var raw=""
(--> (split-string raw "\n")
     (--filter (string-match "Egraph cost\\?" it) it)
     (--map (string-remove-prefix "Egraph cost? " it) it)
     (--map (list (format "%s" it)) it)
     (cons 'hline it)
     (cons (list "Cost") it)
     ;;end
     )
#+end_src

#+name: get-size
#+begin_src elisp :var raw="" :results table
(--> (split-string raw "\n")
     (--filter (string-match "Egraph big big\\?" it) it)
     (--map (string-remove-prefix "Egraph big big? " it) it)
     (--map (list (format "%s" it)) it)
     (cons 'hline it)
     (cons (list "Size") it)
     ;;end
     )
#+end_src

#+name: zip-table
#+begin_src emacs-lisp :var a="", b="" :cache "yes"
(--zip-with (append it other) a b)
;; (--map (if (equal 'hline a) 'hline (string-trim a)) a)
;; (--map (if (equal 'hline b) 'hline (string-trim b)) b)
#+end_src

*** Server setup

Setup server variable.
#+begin_src emacs-lisp :results silent
(save-excursion
  (outline-up-heading 1)
  (org-set-property "header-args+" ":var SERVER=\"18.218.164.151\""))
#+end_src

#+name: set-remote
#+begin_src emacs-lisp :var remote="yes" :results output hidden
(save-excursion
  (if (equal remote "yes")
      (org-set-property "header-args+" (format ":dir /ssh:ubuntu@%s:~/diospyros" SERVER))
    (org-set-property "header-args+" ":dir (magit-toplevel)")))
#+end_src

#+name: sync-repo
#+begin_src shell :results output list :dir (magit-toplevel)
rsync -rv \
      --exclude=.git \
      --exclude=target \
      --exclude='*-results' \
      . "ubuntu@$SERVER:~/diospyros/"
#+end_src

*** Rulesets

#+call: gen-rules(config="configs/baseline.json", rules="rulesets/baseline.json")

#+RESULTS:
#+begin_example
Learned 15 rules in 1.5439685
(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?c ?a) (+ ?b ?d))
(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?d ?b) (* ?a ?c))
(+ ?a (+ ?b ?c)) <=> (+ ?b (+ ?a ?c))
(* ?a (* ?b ?c)) <=> (* ?c (* ?a ?b))
(+ (* ?a ?b) (* ?a ?c)) <=> (* ?a (+ ?b ?c))
(* ?a (* ?b ?c)) <=> (* 1 (* ?a (* ?b ?c)))
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(+ ?a (+ 0 (* ?b ?c))) <=> (+ ?a (* ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(* ?a ?b) <=> (* ?b (* 1 ?a))
(+ ?a ?b) <=> (+ 0 (+ ?a ?b))
(+ ?a ?a) <=> (* ?a 2)
(* 0 ?a) => 0
(+ 0 ?a) <=> (* 1 ?a)
Learned 15 rules in 1.5439685
#+end_example

#+call: gen-rules(config="configs/commutativity.json", rules="rulesets/commutativity.json")

#+RESULTS:
#+begin_example
Learned 15 rules in 1.202806458
(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?a ?c) (* ?b ?d))
(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?c ?a) (+ ?b ?d))
(+ ?a (+ ?b ?c)) <=> (+ ?c (+ ?a ?b))
(* ?a (* ?b ?c)) <=> (* ?b (* ?a ?c))
(+ (* ?a ?b) (* ?a ?c)) <=> (* ?a (+ ?b ?c))
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(+ 0 (* ?a (* ?b ?c))) <=> (* ?a (* ?b ?c))
(+ ?a (* ?b ?c)) <=> (+ 0 (+ ?a (* ?b ?c)))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(+ ?a ?b) <=> (+ 0 (+ ?a ?b))
(* ?a ?b) <=> (* ?b (+ 0 ?a))
(+ ?a ?a) <=> (* ?a 2)
(* ?a 0) => 0
(+ 0 ?a) <=> (* 1 ?a)
Learned 15 rules in 1.202806458
#+end_example

#+call: gen-rules(config="configs/associativity.json", rules="rulesets/associativity.json")

#+RESULTS:
#+begin_example
Learned 13 rules in 1.68245825
(* ?a (* ?b ?c)) <=> (* (* ?a ?b) ?c)
(+ ?a (+ ?b ?c)) <=> (+ (+ ?a ?b) ?c)
(+ (* ?a ?b) (* ?a ?c)) <=> (* (+ ?c ?b) ?a)
(* ?a (* ?b ?c)) <=> (* ?c (* (* 1 ?b) ?a))
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(+ ?a (* ?b ?c)) <=> (+ ?a (* ?b (+ 0 ?c)))
(+ 0 (* ?a (+ ?b ?c))) <=> (* ?a (+ ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(* ?a ?b) <=> (* (* 1 ?a) ?b)
(+ ?a ?b) <=> (+ 0 (+ ?a ?b))
(* 0 ?a) => 0
(+ 0 ?a) <=> (* 1 ?a)
Learned 13 rules in 1.68245825
#+end_example

#+call: gen-rules(config="configs/commute_assoc.json", rules="rulesets/commute_assoc.json")

#+RESULTS:
#+begin_example
Learned 13 rules in 1.155390833
(* ?a (* ?b ?c)) <=> (* (* ?a ?b) ?c)
(+ ?a (+ ?b ?c)) <=> (+ (+ ?a ?b) ?c)
(+ (* ?a ?b) (* ?c ?a)) <=> (* (+ ?c ?b) ?a)
(* ?a (* ?b ?c)) <=> (* 1 (* ?a (* ?b ?c)))
(+ ?a (+ ?b ?c)) <=> (+ 0 (+ ?a (+ ?b ?c)))
(* ?a (+ ?b ?c)) <=> (* ?a (+ ?b (+ 0 ?c)))
(+ ?a (* ?b ?c)) <=> (+ (+ 0 ?a) (* ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
(+ ?a ?b) <=> (+ ?b (+ 0 ?a))
(* ?a ?b) <=> (* ?b (+ 0 ?a))
(* ?a 0) => 0
(+ 0 ?a) <=> (* 1 ?a)
Learned 13 rules in 1.155390833
#+end_example

#+call: gen-rules(config="configs/commute_zero.json", rules="rulesets/commute_zero.json")

#+RESULTS:
#+begin_example
Learned 10 rules in 1.024875333
(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?a ?c) (* ?b ?d))
(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?a ?d) (+ ?c ?b))
(* ?a (* ?b ?c)) <=> (* ?c (* ?a ?b))
(+ (* ?a ?b) (* ?a ?c)) <=> (* ?a (+ ?b ?c))
(* ?a (* ?b ?c)) <=> (* ?c (* (* ?b ?a) 1))
(+ ?a (+ ?b ?c)) <=> (+ (* 1 ?a) (+ ?b ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
?a <=> (+ ?a 0)
(* ?a 0) => 0
Learned 10 rules in 1.024875333
#+end_example

#+call: gen-rules(config="configs/commute_zero_one.json", rules="rulesets/commute_zero_one.json")

#+RESULTS:
#+begin_example
Learned 8 rules in 0.963492833
(* (* ?a ?b) (* ?c ?d)) <=> (* (* ?c ?a) (* ?b ?d))
(+ (+ ?a ?b) (+ ?c ?d)) <=> (+ (+ ?d ?a) (+ ?c ?b))
(+ (* ?a ?b) (* ?b ?c)) <=> (* ?b (+ ?a ?c))
(* ?a ?b) <=> (* ?b ?a)
(+ ?a ?b) <=> (+ ?b ?a)
?a <=> (* ?a 1)
?a <=> (+ ?a 0)
(* ?a 0) => 0
Learned 8 rules in 0.963492833
#+end_example

*** 2d-conv
:PROPERTIES:
:header-args+: :dir (magit-toplevel)
:END:

#+call: set-remote("no")

#+name: 2d-conv-params
#+begin_src json :results file :file 2d-conv-params
{
    "input-rows": 3,
    "input-cols": 3,
    "filter-rows": 2,
    "filter-cols": 2,
    "reg-size": 4
}
#+end_src

#+RESULTS: 2d-conv-params
[[file:../2d-conv-params]]

#+call: build-spec("2d-conv")

#+RESULTS:
: #f

**** No Ruler

#+call: egg-rewrite(bench="2d-conv", rules="")

#+name: 2d-conv-no-ruler-raw-data
#+RESULTS: 2d-conv-no-ruler-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.01s
     Running `src/dios-egraphs/target/release/dios-egraphs 2d-conv-out/spec.rkt --no-ac --rules ''`
Running egg with timeout 180s, width: 2
Starting run with 24 rules
Egraph big big? 95
Egraph cost? 856.9159999999999
Egraph big big? 423
Egraph cost? 838.5199999999999
Egraph big big? 975
Egraph cost? 429.95000000000005
Egraph big big? 1464
Egraph cost? 425.7680000000001
Egraph big big? 1897
Egraph cost? 25.185999999999996
Egraph big big? 2101
Egraph cost? 24.987999999999996
Egraph big big? 2159
Egraph cost? 24.987999999999996
Egraph big big? 2165
Egraph cost? 24.987999999999996
Runner report
=============
  Stop reason: Saturated
  Iterations: 9
  Egraph size: 2165 nodes, 495 classes, 2165 memo
  Rebuilds: 743, 82.56 per iter
  Total time: 0.009587185000000002
    Search:  (0.50) 0.004830243
    Apply:   (0.35) 0.003372616
    Rebuild: (0.14) 0.0013832909999999998
Stopped after 9 iterations, reason: Some(Saturated)

Cost: 24.987999999999996
#+end_example

**** Baseline

#+name: 2d-conv-baseline-raw-data
#+call: egg-rewrite(bench="2d-conv", rules="rulesets/baseline.json")

#+RESULTS[b17f0505092c67a6fcdc9879c8e3fe3ff657fd76]: 2d-conv-baseline-raw-data

**** Commutativity

#+name: 2d-conv-commute-raw-data
#+call: egg-rewrite(bench="2d-conv", rules="rulesets/commutativity.json")

**** Associativity

#+name: 2d-conv-assoc-raw-data
#+call: egg-rewrite(bench="2d-conv", rules="rulesets/associativity.json")

**** Commute + Associativity

#+name: 2d-conv-commute-assoc-raw-data
#+call: egg-rewrite(bench="2d-conv", rules="rulesets/commute_assoc.json")

**** Commute + Zero

#+name: 2d-conv-commute-zero-raw-data
#+call: egg-rewrite(bench="2d-conv", rules="rulesets/commute_zero.json")

**** Commute + Zero + One

#+name: 2d-conv-commute-zero-one-raw-data
#+call: egg-rewrite(bench="2d-conv", rules="rulesets/commute_zero_one.json")

*** mat-mul
:PROPERTIES:
:header-args+: :dir (magit-toplevel)
:END:

#+call: set-remote("no")

#+RESULTS:

#+name: mat-mul-params
#+begin_src json :results file :file mat-mul-params
{
    "A-rows": 2,
    "A-cols": 2,
    "B-rows": 2,
    "B-cols": 2,
    "reg-size": 4
}
#+end_src

#+RESULTS: mat-mul-params
[[file:../mat-mul-params]]

#+call: build-spec("mat-mul")

#+RESULTS:
: #f

**** No Ruler

#+call: egg-rewrite(bench="mat-mul", rules="")

#+name: no-ruler-raw-data
#+RESULTS:
#+begin_example
   Compiling dios-egraphs v0.1.0 (/home/samthomas/Research/diospyros/src/dios-egraphs)
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 2.42s
     Running `src/dios-egraphs/target/release/dios-egraphs mat-mul-out/spec.rkt --no-ac --rules ''`
Running egg with timeout 180s, width: 2
Starting run with 24 rules
Egraph big big? 29
Egraph cost? 212.148
Egraph big big? 128
Egraph cost? 206.54799999999997
Egraph big big? 277
Egraph cost? 4.552000000000001
Egraph big big? 380
Egraph cost? 4.156000000000001
Egraph big big? 442
Egraph cost? 4.156000000000001
Egraph big big? 454
Egraph cost? 4.156000000000001
Runner report
=============
  Stop reason: Saturated
  Iterations: 7
  Egraph size: 454 nodes, 107 classes, 454 memo
  Rebuilds: 161, 23.00 per iter
  Total time: 0.00170217
    Search:  (0.49) 0.000837754
    Apply:   (0.34) 0.000584504
    Rebuild: (0.16) 0.000279091
Stopped after 7 iterations, reason: Some(Saturated)

Cost: 4.156000000000001
#+end_example

**** Baseline

#+call: egg-rewrite(bench="mat-mul", rules="rulesets/baseline.json")

#+name: baseline-raw-data
#+RESULTS:
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.01s
     Running `src/dios-egraphs/target/release/dios-egraphs mat-mul-out/spec.rkt --no-ac --rules rulesets/baseline.json`
Running egg with timeout 180s, width: 2
Starting run with 52 rules
Egraph big big? 29
Egraph cost? 212.148
Egraph big big? 164
Egraph cost? 206.54799999999997
Egraph big big? 635
Egraph cost? 4.552
Egraph big big? 2332
Egraph cost? 4.156000000000001
Egraph big big? 4478
Egraph cost? 4.156000000000001
Egraph big big? 5777
Egraph cost? 4.156000000000001
Egraph big big? 5650
Egraph cost? 4.156000000000001
Egraph big big? 5807
Egraph cost? 4.156000000000001
Egraph big big? 5941
Egraph cost? 4.156000000000001
Egraph big big? 8943
Egraph cost? 4.156000000000001
Egraph big big? 9775
Egraph cost? 4.156000000000001
Egraph big big? 10138
Egraph cost? 4.156000000000001
Egraph big big? 10108
Egraph cost? 4.156000000000001
Egraph big big? 10108
Egraph cost? 4.156000000000001
Egraph big big? 10600
Egraph cost? 4.156000000000001
Egraph big big? 10600
Egraph cost? 4.156000000000001
Egraph big big? 11994
Egraph cost? 4.156000000000001
Egraph big big? 11994
Egraph cost? 4.156000000000001
Egraph big big? 11994
Egraph cost? 4.156000000000001
Egraph big big? 11994
Egraph cost? 4.156000000000001
Egraph big big? 21946
Egraph cost? 4.156000000000001
Egraph big big? 22018
Egraph cost? 4.156000000000001
Egraph big big? 22018
Egraph cost? 4.156000000000001
Egraph big big? 22018
Egraph cost? 4.156000000000001
Egraph big big? 22018
Egraph cost? 4.156000000000001
Egraph big big? 22018
Egraph cost? 4.156000000000001
Egraph big big? 22018
Egraph cost? 4.156000000000001
Runner report
=============
  Stop reason: NodeLimit(36898)
  Iterations: 28
  Egraph size: 36898 nodes, 11267 classes, 36898 memo
  Rebuilds: 8704, 310.86 per iter
  Total time: 5.169339556000001
    Search:  (0.98) 5.046893975000001
    Apply:   (0.02) 0.09399765900000003
    Rebuild: (0.01) 0.028397822999999996
Stopped after 28 iterations, reason: Some(NodeLimit(36898))
(Concat
  (VecMAC
    (VecMul (LitVec (Get A 0) (Get A 0)) (LitVec (Get B 0) (Get B 1)))
    (LitVec (Get A 1) (Get A 1))
    (LitVec (Get B 2) (Get B 3)))
  (VecMAC
    (VecMul (LitVec (Get B 0) (Get B 1)) (LitVec (Get A 2) (Get A 2)))
    (LitVec (Get B 2) (Get B 3))
    (LitVec (Get A 3) (Get A 3))))

Cost: 4.156000000000001
#+end_example

#+name: baseline-size-data
#+call: get-size(baseline-raw-data)

#+name: baseline-cost-data
#+call: get-cost(baseline-raw-data)

#+call: zip-table(baseline-size-data, baseline-cost-data)

#+RESULTS:
|  Size |               Cost |
|-------+--------------------|
|    29 |            212.148 |
|   164 | 206.54799999999997 |
|   635 |              4.552 |
|  2332 |  4.156000000000001 |
|  4478 |  4.156000000000001 |
|  5777 |  4.156000000000001 |
|  5650 |  4.156000000000001 |
|  5807 |  4.156000000000001 |
|  5941 |  4.156000000000001 |
|  8943 |  4.156000000000001 |
|  9775 |  4.156000000000001 |
| 10138 |  4.156000000000001 |
| 10108 |  4.156000000000001 |
| 10108 |  4.156000000000001 |
| 10600 |  4.156000000000001 |
| 10600 |  4.156000000000001 |
| 11994 |  4.156000000000001 |
| 11994 |  4.156000000000001 |
| 11994 |  4.156000000000001 |
| 11994 |  4.156000000000001 |
| 21946 |  4.156000000000001 |
| 22018 |  4.156000000000001 |
| 22018 |  4.156000000000001 |
| 22018 |  4.156000000000001 |
| 22018 |  4.156000000000001 |
| 22018 |  4.156000000000001 |
| 22018 |  4.156000000000001 |

**** Commutativity

#+call: egg-rewrite(bench="mat-mul", rules="rulesets/commutativity.json")

#+name: commute-raw-data
#+RESULTS: commute-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.01s
     Running `src/dios-egraphs/target/release/dios-egraphs mat-mul-out/spec.rkt --no-ac --rules rulesets/commutativity.json`
Running egg with timeout 180s, width: 2
Starting run with 49 rules
Egraph big big? 29
Egraph cost? 212.148
Egraph big big? 156
Egraph cost? 206.54799999999997
Egraph big big? 646
Egraph cost? 4.552
Egraph big big? 2036
Egraph cost? 4.156000000000001
Egraph big big? 3935
Egraph cost? 4.156000000000001
Egraph big big? 4584
Egraph cost? 4.156000000000001
Egraph big big? 4689
Egraph cost? 4.156000000000001
Egraph big big? 4781
Egraph cost? 4.156000000000001
Egraph big big? 4810
Egraph cost? 4.156000000000001
Egraph big big? 6947
Egraph cost? 4.156000000000001
Egraph big big? 8285
Egraph cost? 4.156000000000001
Egraph big big? 8830
Egraph cost? 4.156000000000001
Egraph big big? 8918
Egraph cost? 4.156000000000001
Egraph big big? 8902
Egraph cost? 4.156000000000001
Egraph big big? 8902
Egraph cost? 4.156000000000001
Egraph big big? 9480
Egraph cost? 4.156000000000001
Egraph big big? 9480
Egraph cost? 4.156000000000001
Egraph big big? 10740
Egraph cost? 4.156000000000001
Egraph big big? 10740
Egraph cost? 4.156000000000001
Egraph big big? 10740
Egraph cost? 4.156000000000001
Egraph big big? 10740
Egraph cost? 4.156000000000001
Egraph big big? 19676
Egraph cost? 4.156000000000001
Egraph big big? 19734
Egraph cost? 4.156000000000001
Egraph big big? 19734
Egraph cost? 4.156000000000001
Egraph big big? 19734
Egraph cost? 4.156000000000001
Egraph big big? 19734
Egraph cost? 4.156000000000001
Egraph big big? 19734
Egraph cost? 4.156000000000001
Egraph big big? 19734
Egraph cost? 4.156000000000001
Runner report
=============
  Stop reason: NodeLimit(33138)
  Iterations: 29
  Egraph size: 33138 nodes, 10215 classes, 33138 memo
  Rebuilds: 7700, 265.52 per iter
  Total time: 3.301655782
    Search:  (0.97) 3.2125872370000006
    Apply:   (0.02) 0.06826944900000001
    Rebuild: (0.01) 0.020783823999999996
Stopped after 29 iterations, reason: Some(NodeLimit(33138))
(Concat
  (VecMAC
    (VecMul (LitVec (Get A 0) (Get A 0)) (LitVec (Get B 0) (Get B 1)))
    (LitVec (Get A 1) (Get A 1))
    (LitVec (Get B 2) (Get B 3)))
  (VecMAC
    (VecMul (LitVec (Get B 0) (Get B 1)) (LitVec (Get A 2) (Get A 2)))
    (LitVec (Get B 2) (Get B 3))
    (LitVec (Get A 3) (Get A 3))))

Cost: 4.156000000000001
#+end_example

**** Associativity

#+call: egg-rewrite(bench="mat-mul", rules="rulesets/associativity.json")

#+name: assoc-raw-data
#+RESULTS: assoc-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.01s
     Running `src/dios-egraphs/target/release/dios-egraphs mat-mul-out/spec.rkt --no-ac --rules rulesets/associativity.json`
Running egg with timeout 180s, width: 2
Starting run with 47 rules
Egraph big big? 29
Egraph cost? 212.148
Egraph big big? 166
Egraph cost? 206.54799999999997
Egraph big big? 704
Egraph cost? 4.552
Egraph big big? 2431
Egraph cost? 4.156000000000001
Egraph big big? 4739
Egraph cost? 4.156000000000001
Egraph big big? 5304
Egraph cost? 4.156000000000001
Egraph big big? 5976
Egraph cost? 4.156000000000001
Egraph big big? 6427
Egraph cost? 4.156000000000001
Egraph big big? 6716
Egraph cost? 4.156000000000001
Egraph big big? 8770
Egraph cost? 4.156000000000001
Egraph big big? 9092
Egraph cost? 4.156000000000001
Egraph big big? 9350
Egraph cost? 4.156000000000001
Egraph big big? 9352
Egraph cost? 4.156000000000001
Egraph big big? 9352
Egraph cost? 4.156000000000001
Egraph big big? 9405
Egraph cost? 4.156000000000001
Egraph big big? 9905
Egraph cost? 4.156000000000001
Egraph big big? 9905
Egraph cost? 4.156000000000001
Egraph big big? 9905
Egraph cost? 4.156000000000001
Egraph big big? 11826
Egraph cost? 4.156000000000001
Egraph big big? 11826
Egraph cost? 4.156000000000001
Egraph big big? 11826
Egraph cost? 4.156000000000001
Egraph big big? 11826
Egraph cost? 4.156000000000001
Egraph big big? 11826
Egraph cost? 4.156000000000001
Egraph big big? 29642
Egraph cost? 4.156000000000001
Egraph big big? 29642
Egraph cost? 4.156000000000001
Egraph big big? 29642
Egraph cost? 4.156000000000001
Egraph big big? 29642
Egraph cost? 4.156000000000001
Egraph big big? 29642
Egraph cost? 4.156000000000001
Egraph big big? 29642
Egraph cost? 4.156000000000001
Egraph big big? 29642
Egraph cost? 4.156000000000001
Egraph big big? 29642
Egraph cost? 4.156000000000001
Egraph big big? 29786
Egraph cost? 4.156000000000001
Egraph big big? 29956
Egraph cost? 4.156000000000001
Egraph big big? 29690
Egraph cost? 4.156000000000001
Egraph big big? 29690
Egraph cost? 4.156000000000001
Runner report
=============
  Stop reason: NodeLimit(38574)
  Iterations: 36
  Egraph size: 38574 nodes, 10249 classes, 38574 memo
  Rebuilds: 13018, 361.61 per iter
  Total time: 20.522586947999997
    Search:  (0.99) 20.379030195000006
    Apply:   (0.01) 0.10435302899999999
    Rebuild: (0.00) 0.039185860999999995
Stopped after 36 iterations, reason: Some(NodeLimit(38574))
(Concat
  (VecMAC
    (VecMul (LitVec (Get A 0) (Get A 0)) (LitVec (Get B 0) (Get B 1)))
    (LitVec (Get A 1) (Get A 1))
    (LitVec (Get B 2) (Get B 3)))
  (VecMAC
    (VecMul (LitVec (Get B 0) (Get B 1)) (LitVec (Get A 2) (Get A 2)))
    (LitVec (Get B 2) (Get B 3))
    (LitVec (Get A 3) (Get A 3))))

Cost: 4.156000000000001
#+end_example

**** Commute + Associativity

#+call: egg-rewrite(bench="mat-mul", rules="rulesets/commute_assoc.json")

#+name: commute-assoc-raw-data
#+RESULTS: commute-assoc-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.04s
     Running `src/dios-egraphs/target/release/dios-egraphs mat-mul-out/spec.rkt --no-ac --rules rulesets/commute_assoc.json`
Running egg with timeout 180s, width: 2
Starting run with 47 rules
Egraph big big? 29
Egraph cost? 212.148
Egraph big big? 164
Egraph cost? 206.54799999999997
Egraph big big? 776
Egraph cost? 4.552
Egraph big big? 1885
Egraph cost? 4.156000000000001
Egraph big big? 3574
Egraph cost? 4.156000000000001
Egraph big big? 4868
Egraph cost? 4.156000000000001
Egraph big big? 5229
Egraph cost? 4.156000000000001
Egraph big big? 5289
Egraph cost? 4.156000000000001
Egraph big big? 5319
Egraph cost? 4.156000000000001
Egraph big big? 6016
Egraph cost? 4.156000000000001
Egraph big big? 6204
Egraph cost? 4.156000000000001
Egraph big big? 6364
Egraph cost? 4.156000000000001
Egraph big big? 6424
Egraph cost? 4.156000000000001
Egraph big big? 6424
Egraph cost? 4.156000000000001
Egraph big big? 7518
Egraph cost? 4.156000000000001
Egraph big big? 7518
Egraph cost? 4.156000000000001
Egraph big big? 7518
Egraph cost? 4.156000000000001
Egraph big big? 11360
Egraph cost? 4.156000000000001
Egraph big big? 11360
Egraph cost? 4.156000000000001
Egraph big big? 11360
Egraph cost? 4.156000000000001
Runner report
=============
  Stop reason: TimeLimit(225.397591625)
  Iterations: 21
  Egraph size: 11360 nodes, 2896 classes, 11360 memo
  Rebuilds: 2047, 97.48 per iter
  Total time: 225.374697577
    Search:  (1.00) 225.32593999399998
    Apply:   (0.00) 0.035765412
    Rebuild: (0.00) 0.012979366999999995
Stopped after 21 iterations, reason: Some(TimeLimit(225.397591625))
(Concat
  (VecMAC
    (VecMul (LitVec (Get A 0) (Get A 0)) (LitVec (Get B 0) (Get B 1)))
    (LitVec (Get A 1) (Get A 1))
    (LitVec (Get B 2) (Get B 3)))
  (VecMAC
    (VecMul (LitVec (Get B 0) (Get B 1)) (LitVec (Get A 2) (Get A 2)))
    (LitVec (Get B 2) (Get B 3))
    (LitVec (Get A 3) (Get A 3))))

Cost: 4.156000000000001
#+end_example

**** Commute + Zero

#+call: egg-rewrite(bench="mat-mul", rules="rulesets/commute_zero.json")

#+name: commute-zero-raw-data
#+RESULTS: commute-zero-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.05s
     Running `src/dios-egraphs/target/release/dios-egraphs mat-mul-out/spec.rkt --no-ac --rules rulesets/commute_zero.json`
Running egg with timeout 180s, width: 2
Starting run with 39 rules
Egraph big big? 29
Egraph cost? 212.148
Egraph big big? 169
Egraph cost? 206.54799999999997
Egraph big big? 590
Egraph cost? 4.552
Egraph big big? 1709
Egraph cost? 4.156000000000001
Egraph big big? 3538
Egraph cost? 4.156000000000001
Egraph big big? 4706
Egraph cost? 4.156000000000001
Egraph big big? 5159
Egraph cost? 4.156000000000001
Egraph big big? 5159
Egraph cost? 4.156000000000001
Egraph big big? 6225
Egraph cost? 4.156000000000001
Egraph big big? 5643
Egraph cost? 4.156000000000001
Egraph big big? 5746
Egraph cost? 4.156000000000001
Egraph big big? 5746
Egraph cost? 4.156000000000001
Egraph big big? 6230
Egraph cost? 4.156000000000001
Egraph big big? 6230
Egraph cost? 4.156000000000001
Egraph big big? 7253
Egraph cost? 4.156000000000001
Egraph big big? 6912
Egraph cost? 4.156000000000001
Egraph big big? 6912
Egraph cost? 4.156000000000001
Egraph big big? 6912
Egraph cost? 4.156000000000001
Egraph big big? 6912
Egraph cost? 4.156000000000001
Egraph big big? 6912
Egraph cost? 4.156000000000001
Egraph big big? 6912
Egraph cost? 4.156000000000001
Egraph big big? 6912
Egraph cost? 4.156000000000001
Runner report
=============
  Stop reason: TimeLimit(202.202571)
  Iterations: 23
  Egraph size: 6912 nodes, 541 classes, 6912 memo
  Rebuilds: 3680, 160.00 per iter
  Total time: 202.181494619
    Search:  (1.00) 202.123255492
    Apply:   (0.00) 0.04386716000000001
    Rebuild: (0.00) 0.014346074999999998
Stopped after 23 iterations, reason: Some(TimeLimit(202.202571))
(Concat
  (VecMAC
    (VecMul (LitVec (Get A 0) (Get A 0)) (LitVec (Get B 0) (Get B 1)))
    (LitVec (Get A 1) (Get A 1))
    (LitVec (Get B 2) (Get B 3)))
  (VecMAC
    (VecMul (LitVec (Get B 0) (Get B 1)) (LitVec (Get A 2) (Get A 2)))
    (LitVec (Get B 2) (Get B 3))
    (LitVec (Get A 3) (Get A 3))))

Cost: 4.156000000000001
#+end_example

**** Commute + Zero + One

#+call: egg-rewrite(bench="mat-mul", rules="rulesets/commute_zero_one.json")

#+name: commute-zero-one-raw-data
#+RESULTS: commute-zero-one-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.05s
     Running `src/dios-egraphs/target/release/dios-egraphs mat-mul-out/spec.rkt --no-ac --rules rulesets/commute_zero_one.json`
Running egg with timeout 180s, width: 2
Starting run with 37 rules
Egraph big big? 29
Egraph cost? 212.148
Egraph big big? 198
Egraph cost? 206.54799999999997
Egraph big big? 802
Egraph cost? 4.552
Egraph big big? 2648
Egraph cost? 4.156000000000001
Egraph big big? 4936
Egraph cost? 4.156000000000001
Egraph big big? 6062
Egraph cost? 4.156000000000001
Egraph big big? 6212
Egraph cost? 4.156000000000001
Egraph big big? 6212
Egraph cost? 4.156000000000001
Egraph big big? 7372
Egraph cost? 4.156000000000001
Egraph big big? 8031
Egraph cost? 4.156000000000001
Egraph big big? 7894
Egraph cost? 4.156000000000001
Egraph big big? 7910
Egraph cost? 4.156000000000001
Egraph big big? 7910
Egraph cost? 4.156000000000001
Egraph big big? 7910
Egraph cost? 4.156000000000001
Egraph big big? 9722
Egraph cost? 4.156000000000001
Egraph big big? 9269
Egraph cost? 4.156000000000001
Egraph big big? 9269
Egraph cost? 4.156000000000001
Egraph big big? 11534
Egraph cost? 4.156000000000001
Egraph big big? 12893
Egraph cost? 4.156000000000001
Egraph big big? 12893
Egraph cost? 4.156000000000001
Egraph big big? 8816
Egraph cost? 4.156000000000001
Egraph big big? 8816
Egraph cost? 4.156000000000001
Egraph big big? 8816
Egraph cost? 4.156000000000001
Egraph big big? 12722
Egraph cost? 4.156000000000001
Egraph big big? 12722
Egraph cost? 4.156000000000001
Runner report
=============
  Stop reason: TimeLimit(248.401888)
  Iterations: 26
  Egraph size: 12722 nodes, 637 classes, 12722 memo
  Rebuilds: 4332, 166.62 per iter
  Total time: 248.36512574099999
    Search:  (1.00) 248.29701474100003
    Apply:   (0.00) 0.048214202000000005
    Rebuild: (0.00) 0.019882658
Stopped after 26 iterations, reason: Some(TimeLimit(248.401888))
(Concat
  (VecMAC
    (VecMul (LitVec (Get A 0) (Get A 0)) (LitVec (Get B 0) (Get B 1)))
    (LitVec (Get A 1) (Get A 1))
    (LitVec (Get B 2) (Get B 3)))
  (VecMAC
    (VecMul (LitVec (Get B 0) (Get B 1)) (LitVec (Get A 2) (Get A 2)))
    (LitVec (Get B 2) (Get B 3))
    (LitVec (Get A 3) (Get A 3))))

Cost: 4.156000000000001
#+end_example

*** qr-decomp

#+name: qr-decomp-params
#+begin_src json :results file :file qr-decomp-params
{
    "N": 3,
    "reg-size": 4
}
#+end_src

#+RESULTS: qr-decomp-params
[[file:../qr-decomp-params]]

#+call: build-spec("qr-decomp")

#+RESULTS:
: #f

**** No Ruler

#+call: egg-rewrite(bench="qr-decomp", rules="")

#+name: qr-decomp-no-ruler-raw-data
#+RESULTS: qr-decomp-no-ruler-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.01s
     Running `src/dios-egraphs/target/release/dios-egraphs qr-decomp-out/spec.rkt --no-ac --rules ''`
Running egg with timeout 180s, width: 2
Starting run with 24 rules
Egraph big big? 180
Egraph cost? 163590.465
Egraph big big? 746
Egraph cost? 163590.465
Egraph big big? 1513
Egraph cost? 163590.465
Egraph big big? 2076
Egraph cost? 163590.465
Egraph big big? 2694
Egraph cost? 163590.465
Egraph big big? 3213
Egraph cost? 163590.465
Egraph big big? 3733
Egraph cost? 163590.465
Egraph big big? 4301
Egraph cost? 163590.465
Egraph big big? 4638
Egraph cost? 163590.465
Egraph big big? 4796
Egraph cost? 163590.465
Egraph big big? 4892
Egraph cost? 128209.19
Egraph big big? 4943
Egraph cost? 128209.19
Egraph big big? 4970
Egraph cost? 128209.19
Egraph big big? 5561
Egraph cost? 128209.19
Egraph big big? 5747
Egraph cost? 128209.19
Egraph big big? 5765
Egraph cost? 128209.19
Egraph big big? 5793
Egraph cost? 128209.19
Egraph big big? 5821
Egraph cost? 128209.19
Egraph big big? 5835
Egraph cost? 128209.19
Egraph big big? 6209
Egraph cost? 128209.19
Egraph big big? 6209
Egraph cost? 128209.19
Runner report
=============
  Stop reason: Saturated
  Iterations: 22
  Egraph size: 6209 nodes, 1363 classes, 6209 memo
  Rebuilds: 2458, 111.73 per iter
  Total time: 0.066693014
    Search:  (0.56) 0.037075672
    Apply:   (0.32) 0.021607841
    Rebuild: (0.12) 0.008001478
Stopped after 22 iterations, reason: Some(Saturated)

Cost: 128209.19
#+end_example

**** Baseline

#+call: egg-rewrite(bench="qr-decomp", rules="rulesets/baseline.json")

#+name: qr-decomp-baseline-raw-data
#+RESULTS: qr-decomp-baseline-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.05s
     Running `src/dios-egraphs/target/release/dios-egraphs qr-decomp-out/spec.rkt --no-ac --rules rulesets/baseline.json`
Running egg with timeout 180s, width: 2
Starting run with 50 rules
Egraph big big? 180
Egraph cost? 163590.465
Egraph big big? 1191
Egraph cost? 163590.465
Egraph big big? 4056
Egraph cost? 163590.465
Egraph big big? 6442
Egraph cost? 163590.465
Egraph big big? 6936
Egraph cost? 163590.465
Egraph big big? 6936
Egraph cost? 163590.465
Egraph big big? 10314
Egraph cost? 163590.465
Egraph big big? 10423
Egraph cost? 163590.465
Egraph big big? 10439
Egraph cost? 163590.465
Egraph big big? 10455
Egraph cost? 163590.465
Egraph big big? 10455
Egraph cost? 163590.465
Egraph big big? 10455
Egraph cost? 163590.465
Egraph big big? 13026
Egraph cost? 163590.46499999997
Egraph big big? 15119
Egraph cost? 163590.46499999997
Egraph big big? 16094
Egraph cost? 163590.46499999997
Egraph big big? 16426
Egraph cost? 163590.46499999997
Egraph big big? 16615
Egraph cost? 163590.46499999997
Egraph big big? 16615
Egraph cost? 163590.46499999997
Egraph big big? 19677
Egraph cost? 163590.46499999997
Egraph big big? 19677
Egraph cost? 163590.46499999997
Egraph big big? 19905
Egraph cost? 163590.46499999997
Egraph big big? 20351
Egraph cost? 163590.46499999997
Egraph big big? 21243
Egraph cost? 163590.46499999997
Egraph big big? 21243
Egraph cost? 163590.46499999997
Egraph big big? 21243
Egraph cost? 163590.46499999997
Egraph big big? 21243
Egraph cost? 163590.46499999997
Egraph big big? 21689
Egraph cost? 163590.46499999997
Egraph big big? 22135
Egraph cost? 163590.46499999997
Egraph big big? 22135
Egraph cost? 163590.46499999997
Egraph big big? 23044
Egraph cost? 163590.46499999997
Egraph big big? 23851
Egraph cost? 163590.46499999997
Egraph big big? 26494
Egraph cost? 163590.46499999997
Egraph big big? 29179
Egraph cost? 163590.46499999997
Egraph big big? 29179
Egraph cost? 163590.46499999997
Egraph big big? 27415
Egraph cost? 163590.46499999997
Egraph big big? 27415
Egraph cost? 163590.46499999997
Runner report
=============
  Stop reason: NodeLimit(30061)
  Iterations: 37
  Egraph size: 30057 nodes, 4717 classes, 30061 memo
  Rebuilds: 16709, 451.59 per iter
  Total time: 3.656694071000001
    Search:  (0.95) 3.460162195
    Apply:   (0.04) 0.150283071
    Rebuild: (0.01) 0.046228532
Stopped after 37 iterations, reason: Some(NodeLimit(30061))
Cost: 163590.46499999997
#+end_example

**** Commutativity

#+call: egg-rewrite(bench="qr-decomp", rules="rulesets/commutativity.json")

#+name: qr-decomp-commute-raw-data
#+RESULTS: qr-decomp-commute-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.01s
     Running `src/dios-egraphs/target/release/dios-egraphs qr-decomp-out/spec.rkt --no-ac --rules rulesets/commutativity.json`
Running egg with timeout 180s, width: 2
Starting run with 49 rules
Egraph big big? 180
Egraph cost? 163590.465
Egraph big big? 1114
Egraph cost? 163590.465
Egraph big big? 4300
Egraph cost? 163590.46499999997
Egraph big big? 6617
Egraph cost? 163590.46499999997
Egraph big big? 7182
Egraph cost? 163590.46499999997
Egraph big big? 7170
Egraph cost? 163590.46499999997
Egraph big big? 7170
Egraph cost? 163590.46499999997
Egraph big big? 11111
Egraph cost? 163590.46499999997
Egraph big big? 11477
Egraph cost? 163590.46499999997
Egraph big big? 11505
Egraph cost? 163590.46499999997
Egraph big big? 11505
Egraph cost? 163590.46499999997
Egraph big big? 11505
Egraph cost? 163590.46499999997
Egraph big big? 13034
Egraph cost? 163590.46499999997
Egraph big big? 13384
Egraph cost? 163590.46499999997
Egraph big big? 13527
Egraph cost? 163590.46499999997
Egraph big big? 13640
Egraph cost? 163590.46499999997
Egraph big big? 13640
Egraph cost? 163590.46499999997
Egraph big big? 15784
Egraph cost? 163590.46499999997
Egraph big big? 15784
Egraph cost? 163590.46499999997
Egraph big big? 15784
Egraph cost? 163590.46499999997
Egraph big big? 15784
Egraph cost? 163590.46499999997
Egraph big big? 18636
Egraph cost? 163590.46499999997
Egraph big big? 23037
Egraph cost? 163590.46499999997
Egraph big big? 23450
Egraph cost? 163590.46499999997
Egraph big big? 23753
Egraph cost? 163590.46499999997
Egraph big big? 23854
Egraph cost? 163590.46499999997
Egraph big big? 23854
Egraph cost? 163590.46499999997
Egraph big big? 23009
Egraph cost? 163590.46499999997
Egraph big big? 23009
Egraph cost? 163590.46499999997
Egraph big big? 26753
Egraph cost? 163590.46499999997
Egraph big big? 26955
Egraph cost? 163590.46499999997
Egraph big big? 26955
Egraph cost? 163590.46499999997
Egraph big big? 23603
Egraph cost? 163590.46499999997
Egraph big big? 24100
Egraph cost? 163590.46499999997
Egraph big big? 24100
Egraph cost? 163590.46499999997
Runner report
=============
  Stop reason: NodeLimit(31135)
  Iterations: 36
  Egraph size: 31135 nodes, 7954 classes, 31135 memo
  Rebuilds: 14444, 401.22 per iter
  Total time: 5.257267113
    Search:  (0.97) 5.083162363
    Apply:   (0.02) 0.13027557099999998
    Rebuild: (0.01) 0.04380902999999999
Stopped after 36 iterations, reason: Some(NodeLimit(31135))
Cost: 163590.46499999997
#+end_example

**** Associativity

#+call: egg-rewrite(bench="qr-decomp", rules="rulesets/associativity.json")

#+name: qr-decomp-assoc-raw-data
#+RESULTS: qr-decomp-assoc-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.01s
     Running `src/dios-egraphs/target/release/dios-egraphs qr-decomp-out/spec.rkt --no-ac --rules rulesets/associativity.json`
Running egg with timeout 180s, width: 2
Starting run with 47 rules
Egraph big big? 180
Egraph cost? 163590.465
Egraph big big? 1175
Egraph cost? 163590.465
Egraph big big? 4736
Egraph cost? 163590.46499999997
Egraph big big? 6667
Egraph cost? 163590.46499999997
Egraph big big? 7510
Egraph cost? 163590.46499999997
Egraph big big? 7528
Egraph cost? 163590.46499999997
Egraph big big? 7528
Egraph cost? 163590.46499999997
Egraph big big? 12075
Egraph cost? 163590.46499999997
Egraph big big? 11883
Egraph cost? 163590.46499999997
Egraph big big? 11938
Egraph cost? 163590.46499999997
Egraph big big? 11944
Egraph cost? 163590.46499999997
Egraph big big? 11944
Egraph cost? 163590.46499999997
Egraph big big? 11944
Egraph cost? 163590.46499999997
Egraph big big? 16539
Egraph cost? 163590.46499999997
Egraph big big? 16849
Egraph cost? 163590.46499999997
Egraph big big? 17323
Egraph cost? 163590.46499999997
Egraph big big? 17581
Egraph cost? 163590.46499999997
Egraph big big? 17740
Egraph cost? 163590.46499999997
Egraph big big? 17858
Egraph cost? 163590.46499999997
Egraph big big? 20138
Egraph cost? 163590.46499999997
Egraph big big? 20138
Egraph cost? 163590.46499999997
Egraph big big? 20049
Egraph cost? 163590.46499999997
Egraph big big? 20049
Egraph cost? 163590.46499999997
Egraph big big? 23723
Egraph cost? 163590.46499999997
Egraph big big? 24933
Egraph cost? 163590.46499999997
Egraph big big? 24933
Egraph cost? 163590.46499999997
Egraph big big? 24933
Egraph cost? 163590.46499999997
Egraph big big? 23046
Egraph cost? 163590.46499999997
Egraph big big? 23563
Egraph cost? 163590.46499999997
Egraph big big? 23563
Egraph cost? 163590.46499999997
Egraph big big? 24080
Egraph cost? 163590.46499999997
Egraph big big? 25114
Egraph cost? 163590.46499999997
Egraph big big? 26865
Egraph cost? 163590.46499999997
Egraph big big? 26865
Egraph cost? 163590.46499999997
Egraph big big? 26865
Egraph cost? 163590.46499999997
Egraph big big? 26865
Egraph cost? 163590.46499999997
Egraph big big? 26865
Egraph cost? 163590.46499999997
Egraph big big? 26865
Egraph cost? 163590.46499999997
Runner report
=============
  Stop reason: NodeLimit(32308)
  Iterations: 39
  Egraph size: 32308 nodes, 7319 classes, 32308 memo
  Rebuilds: 15632, 400.82 per iter
  Total time: 4.660617155
    Search:  (0.96) 4.461865361999999
    Apply:   (0.03) 0.15225936199999998
    Rebuild: (0.01) 0.046451196000000014
Stopped after 39 iterations, reason: Some(NodeLimit(32308))
Cost: 163590.46499999997
#+end_example

**** Commute + Associativity

#+call: egg-rewrite(bench="qr-decomp", rules="rulesets/commute_assoc.json")

#+name: qr-decomp-commute-assoc-raw-data
#+RESULTS: qr-decomp-commute-assoc-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.01s
     Running `src/dios-egraphs/target/release/dios-egraphs qr-decomp-out/spec.rkt --no-ac --rules rulesets/commute_assoc.json`
Running egg with timeout 180s, width: 2
Starting run with 47 rules
Egraph big big? 180
Egraph cost? 163590.465
Egraph big big? 1204
Egraph cost? 163590.465
Egraph big big? 5183
Egraph cost? 163590.46499999997
Egraph big big? 5934
Egraph cost? 163590.46499999997
Egraph big big? 6559
Egraph cost? 163590.46499999997
Egraph big big? 6639
Egraph cost? 163590.46499999997
Egraph big big? 6644
Egraph cost? 163590.46499999997
Egraph big big? 6648
Egraph cost? 163590.46499999997
Egraph big big? 10475
Egraph cost? 163590.46499999997
Egraph big big? 11631
Egraph cost? 163590.46499999997
Egraph big big? 11995
Egraph cost? 163590.46499999997
Egraph big big? 12137
Egraph cost? 163590.46499999997
Egraph big big? 12137
Egraph cost? 163590.46499999997
Egraph big big? 12137
Egraph cost? 163590.46499999997
Egraph big big? 13649
Egraph cost? 163590.46499999997
Egraph big big? 14638
Egraph cost? 163590.46499999997
Egraph big big? 15264
Egraph cost? 163590.46499999997
Egraph big big? 15414
Egraph cost? 163590.46499999997
Egraph big big? 15414
Egraph cost? 163590.46499999997
Egraph big big? 17670
Egraph cost? 163590.46499999997
Egraph big big? 17670
Egraph cost? 163590.46499999997
Egraph big big? 17670
Egraph cost? 163590.46499999997
Egraph big big? 17670
Egraph cost? 163590.46499999997
Egraph big big? 17670
Egraph cost? 163590.46499999997
Egraph big big? 17670
Egraph cost? 163590.46499999997
Egraph big big? 17670
Egraph cost? 163590.46499999997
Runner report
=============
  Stop reason: NodeLimit(34747)
  Iterations: 27
  Egraph size: 34734 nodes, 6567 classes, 34747 memo
  Rebuilds: 9110, 337.41 per iter
  Total time: 5.302469407999999
    Search:  (0.98) 5.192245199
    Apply:   (0.02) 0.085148533
    Rebuild: (0.00) 0.02506053499999999
Stopped after 27 iterations, reason: Some(NodeLimit(34747))
Cost: 163590.46499999997
#+end_example

**** Commute + Zero

#+call: egg-rewrite(bench="qr-decomp", rules="rulesets/commute_zero.json")

#+name: qr-decomp-commute-zero-raw-data
#+RESULTS: qr-decomp-commute-zero-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.01s
     Running `src/dios-egraphs/target/release/dios-egraphs qr-decomp-out/spec.rkt --no-ac --rules rulesets/commute_zero.json`
Running egg with timeout 180s, width: 2
Starting run with 39 rules
Egraph big big? 180
Egraph cost? 163590.465
Egraph big big? 1172
Egraph cost? 163590.465
Egraph big big? 4124
Egraph cost? 163590.465
Egraph big big? 5111
Egraph cost? 163590.465
Egraph big big? 5624
Egraph cost? 163590.465
Egraph big big? 5624
Egraph cost? 163590.465
Egraph big big? 9410
Egraph cost? 163590.465
Egraph big big? 9684
Egraph cost? 163590.465
Egraph big big? 9684
Egraph cost? 163590.465
Egraph big big? 10941
Egraph cost? 163590.465
Egraph big big? 10941
Egraph cost? 163590.465
Egraph big big? 14169
Egraph cost? 163590.465
Egraph big big? 13498
Egraph cost? 163590.465
Egraph big big? 13498
Egraph cost? 163590.465
Egraph big big? 14152
Egraph cost? 163590.465
Egraph big big? 14152
Egraph cost? 163590.465
Runner report
=============
  Stop reason: NodeLimit(30722)
  Iterations: 17
  Egraph size: 30707 nodes, 7599 classes, 30722 memo
  Rebuilds: 9545, 561.47 per iter
  Total time: 3.6926118679999997
    Search:  (0.98) 3.6258622849999997
    Apply:   (0.01) 0.045732785
    Rebuild: (0.01) 0.021007829999999998
Stopped after 17 iterations, reason: Some(NodeLimit(30722))
Cost: 163589.46999999997
#+end_example

**** Commute + Zero + One

#+call: egg-rewrite(bench="qr-decomp", rules="rulesets/commute_zero_one.json")

#+name: qr-decomp-commute-zero-one-raw-data
#+RESULTS: qr-decomp-commute-zero-one-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.01s
     Running `src/dios-egraphs/target/release/dios-egraphs qr-decomp-out/spec.rkt --no-ac --rules rulesets/commute_zero_one.json`
Running egg with timeout 180s, width: 2
Starting run with 37 rules
Egraph big big? 180
Egraph cost? 163590.465
Egraph big big? 1288
Egraph cost? 163590.465
Egraph big big? 5222
Egraph cost? 163590.465
Egraph big big? 6339
Egraph cost? 163590.465
Egraph big big? 7152
Egraph cost? 163590.465
Egraph big big? 7152
Egraph cost? 163590.465
Egraph big big? 13385
Egraph cost? 163590.465
Egraph big big? 13404
Egraph cost? 163590.465
Egraph big big? 13404
Egraph cost? 163590.465
Egraph big big? 13404
Egraph cost? 163590.465
Egraph big big? 19747
Egraph cost? 163590.465
Egraph big big? 20269
Egraph cost? 163590.465
Egraph big big? 20269
Egraph cost? 163590.465
Egraph big big? 22655
Egraph cost? 163590.465
Egraph big big? 22655
Egraph cost? 163590.465
Egraph big big? 22655
Egraph cost? 163590.465
Egraph big big? 22655
Egraph cost? 163590.465
Runner report
=============
  Stop reason: TimeLimit(182.562487458)
  Iterations: 18
  Egraph size: 22633 nodes, 2841 classes, 22655 memo
  Rebuilds: 8011, 445.06 per iter
  Total time: 182.20815912
    Search:  (1.00) 182.14140828799998
    Apply:   (0.00) 0.044783369999999996
    Rebuild: (0.00) 0.021940952
Stopped after 18 iterations, reason: Some(TimeLimit(182.562487458))
Cost: 163590.465
#+end_example

*** q-prod

#+name: q-prod-params
#+begin_src json :results file :file qr-decomp-params
{
    "reg-size": 4
}
#+end_src

#+RESULTS: q-prod-params
[[file:../qr-decomp-params]]

#+call: build-spec("q-prod")

#+RESULTS:
: #f

**** No Ruler

#+name: q-prod-no-ruler-raw-data
#+call: egg-rewrite(bench="q-prod", rules="")

#+RESULTS: q-prod-no-ruler-raw-data
#+begin_example
   Compiling dios-egraphs v0.1.0 (/home/samthomas/Research/diospyros/src/dios-egraphs)
warning: unused import: `binopsearcher::build_binop_or_zero_rule`
 --> src/rules.rs:7:5
  |
7 |     binopsearcher::build_binop_or_zero_rule,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:28:4
   |
28 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 2 warnings emitted

    Finished release [optimized] target(s) in 2.44s
     Running `src/dios-egraphs/target/release/dios-egraphs q-prod-out/spec.rkt --no-ac --rules ''`
Running egg with timeout 180s, width: 2
[
    Rewrite {
        name: "neg-minus-zero",
        long_name: "\"(neg ?a)\" => \"(- 0 ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "expand-zero-get",
        long_name: "\"0\" => \"(Get 0 0)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-minus-zero-rev",
        long_name: "\"(- 0 ?a)\" => \"(neg ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-zero-inv",
        long_name: "\"0\" => \"(neg 0)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "litvec",
        long_name: "{ searcher } => { applier }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "div-1-inv",
        long_name: "\"?a\" => \"(/ ?a 1)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "add-0-inv",
        long_name: "\"?a\" => \"(+ 0 ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-sgn",
        long_name: "\"(neg (sgn ?a))\" => \"(sgn (neg ?a))\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "add-0",
        long_name: "\"(+ 0 ?a)\" => \"?a\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "div-1",
        long_name: "\"(/ ?a 1)\" => \"?a\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "vec-mac",
        long_name: "{ searcher } => { applier }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "sqrt-1-inv-rev",
        long_name: "\"(sqrt 1)\" => \"1\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "mul-0",
        long_name: "\"(* 0 ?a)\" => \"0\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-sgn-rev",
        long_name: "\"(sgn (neg ?a))\" => \"(neg (sgn ?a))\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "sqrt-1-inv",
        long_name: "\"1\" => \"(sqrt 1)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-neg-rev",
        long_name: "\"?a\" => \"(neg (neg ?a))\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-minus-rev",
        long_name: "\"(- 0 ?a)\" => \"(neg ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-zero-inv-rev",
        long_name: "\"(neg 0)\" => \"0\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "mul-1-inv",
        long_name: "\"?a\" => \"(* 1 ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "mul-1",
        long_name: "\"(* 1 ?a)\" => \"?a\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-neg",
        long_name: "\"(neg (neg ?a))\" => \"?a\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg_unop",
        long_name: "{ searcher } => { applier }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-minus",
        long_name: "\"(neg ?a)\" => \"(- 0 ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
]
Starting run with 23 rules
Egraph big big? 102
Egraph cost? 503.5590000000001
Egraph big big? 589
Egraph cost? 503.5590000000001
Egraph big big? 1031
Egraph cost? 502.7610000000001
Egraph big big? 1297
Egraph cost? 501.86400000000003
Egraph big big? 1988
Egraph cost? 494.57500000000005
Egraph big big? 3301
Egraph cost? 390.701
Egraph big big? 4929
Egraph cost? 288.92400000000004
Egraph big big? 6318
Egraph cost? 288.82500000000005
Egraph big big? 6789
Egraph cost? 280.867
Egraph big big? 6916
Egraph cost? 280.76800000000003
Egraph big big? 6960
Egraph cost? 280.76800000000003
Egraph big big? 6960
Egraph cost? 280.76800000000003
Egraph big big? 8454
Egraph cost? 271.19599999999997
Egraph big big? 9338
Egraph cost? 268.303
Egraph big big? 9747
Egraph cost? 68.453
Egraph big big? 9951
Egraph cost? 68.453
Egraph big big? 10009
Egraph cost? 68.453
Egraph big big? 10033
Egraph cost? 68.453
Egraph big big? 10627
Egraph cost? 68.453
Egraph big big? 10637
Egraph cost? 68.453
Egraph big big? 10637
Egraph cost? 68.453
Runner report
=============
  Stop reason: Saturated
  Iterations: 22
  Egraph size: 10637 nodes, 1569 classes, 10637 memo
  Rebuilds: 2926, 133.00 per iter
  Total time: 0.087712891
    Search:  (0.54) 0.04723825100000001
    Apply:   (0.33) 0.029359558999999997
    Rebuild: (0.13) 0.011106765
Stopped after 22 iterations, reason: Some(Saturated)

Cost: 68.453
#+end_example

**** Baseline

#+name: q-prod-baseline-raw-data
#+call: egg-rewrite(bench="q-prod", rules="rulesets/baseline.json")

#+RESULTS[8c488273864dfc08bd32e648012069336cc955b7]: q-prod-baseline-raw-data
#+begin_example
warning: unused import: `binopsearcher::build_binop_or_zero_rule`
 --> src/rules.rs:7:5
  |
7 |     binopsearcher::build_binop_or_zero_rule,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:28:4
   |
28 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 2 warnings emitted

    Finished release [optimized] target(s) in 0.01s
     Running `src/dios-egraphs/target/release/dios-egraphs q-prod-out/spec.rkt --no-ac --rules rulesets/baseline.json`
Running egg with timeout 180s, width: 2
[
    Rewrite {
        name: "expand-zero-get",
        long_name: "\"0\" => \"(Get 0 0)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-minus",
        long_name: "\"(neg ?a)\" => \"(- 0 ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-minus-zero",
        long_name: "\"(neg ?a)\" => \"(- 0 ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "mul-1-inv",
        long_name: "\"?a\" => \"(* 1 ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_2_lr",
        long_name: "{ lpat } => { rpat }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_1_lr-rev",
        long_name: "{ rpat.clone() } => { lpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-zero-inv-rev",
        long_name: "\"(neg 0)\" => \"0\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-minus-zero-rev",
        long_name: "\"(- 0 ?a)\" => \"(neg ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-sgn-rev",
        long_name: "\"(sgn (neg ?a))\" => \"(neg (sgn ?a))\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_9_lr",
        long_name: "{ lpat } => { rpat }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_5_lr",
        long_name: "{ lpat.clone() } => { rpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_1_lr",
        long_name: "{ lpat.clone() } => { rpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-neg",
        long_name: "\"(neg (neg ?a))\" => \"?a\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_11_lr-rev",
        long_name: "{ rpat.clone() } => { lpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_11_lr",
        long_name: "{ lpat.clone() } => { rpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "litvec",
        long_name: "{ searcher } => { applier }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg_unop",
        long_name: "{ searcher } => { applier }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_7_lr",
        long_name: "{ lpat.clone() } => { rpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_0_lr-rev",
        long_name: "{ rpat.clone() } => { lpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_0_lr",
        long_name: "{ lpat.clone() } => { rpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "vec-mac",
        long_name: "{ searcher } => { applier }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_12_lr",
        long_name: "{ lpat.clone() } => { rpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_6_lr-rev",
        long_name: "{ rpat.clone() } => { lpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_13_lr",
        long_name: "{ lpat } => { rpat }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_6_lr",
        long_name: "{ lpat.clone() } => { rpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_14_lr-rev",
        long_name: "{ rpat.clone() } => { lpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_4_lr-rev",
        long_name: "{ rpat.clone() } => { lpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-sgn",
        long_name: "\"(neg (sgn ?a))\" => \"(sgn (neg ?a))\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "div-1-inv",
        long_name: "\"?a\" => \"(/ ?a 1)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "mul-0",
        long_name: "\"(* 0 ?a)\" => \"0\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "add-0",
        long_name: "\"(+ 0 ?a)\" => \"?a\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "mul-1",
        long_name: "\"(* 1 ?a)\" => \"?a\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_10_lr",
        long_name: "{ lpat.clone() } => { rpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_3_lr-rev",
        long_name: "{ rpat.clone() } => { lpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "sqrt-1-inv-rev",
        long_name: "\"(sqrt 1)\" => \"1\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "div-1",
        long_name: "\"(/ ?a 1)\" => \"?a\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "add-0-inv",
        long_name: "\"?a\" => \"(+ 0 ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "sqrt-1-inv",
        long_name: "\"1\" => \"(sqrt 1)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-zero-inv",
        long_name: "\"0\" => \"(neg 0)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_12_lr-rev",
        long_name: "{ rpat.clone() } => { lpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-minus-rev",
        long_name: "\"(- 0 ?a)\" => \"(neg ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_5_lr-rev",
        long_name: "{ rpat.clone() } => { lpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_8_lr",
        long_name: "{ lpat } => { rpat }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_4_lr",
        long_name: "{ lpat.clone() } => { rpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_7_lr-rev",
        long_name: "{ rpat.clone() } => { lpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_3_lr",
        long_name: "{ lpat.clone() } => { rpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-neg-rev",
        long_name: "\"?a\" => \"(neg (neg ?a))\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_14_lr",
        long_name: "{ lpat.clone() } => { rpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_10_lr-rev",
        long_name: "{ rpat.clone() } => { lpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
]
Starting run with 49 rules
Egraph big big? 102
Egraph cost? 503.5590000000001
Egraph big big? 712
Egraph cost? 503.5590000000001
Egraph big big? 2036
Egraph cost? 502.76099999999997
Egraph big big? 14268
Egraph cost? 493.26099999999997
Runner report
=============
  Stop reason: NodeLimit(1253406)
  Iterations: 5
  Egraph size: 1253388 nodes, 31885 classes, 1253406 memo
  Rebuilds: 6467, 1293.40 per iter
  Total time: 2.6347240540000003
    Search:  (0.13) 0.333056512
    Apply:   (0.55) 1.461696598
    Rebuild: (0.32) 0.839969721
Stopped after 5 iterations, reason: Some(NodeLimit(1253406))

Cost: 383.085
#+end_example

**** Tuning

#+name: tuning-params
#+begin_src json
"params": {
    "seed": 0,
    "n_samples": 0,
    "variables": 4,
    "vector_size": 2,
    "abs_timeout": 240,
    "dios_config": "configs/baseline.json",
    "iters": 2,
    "rules_to_take": 18446744073709551615,
    "chunk_size": 100000,
    "minimize": false,
    "no_constants_above_iter": 999999,
    "no_conditionals": false,
    "no_run_rewrites": false,
    "linear_cvec_matching": false,
    "outfile": "rulesets/tuning.json",
    "eqsat_node_limit": 300000,
    "eqsat_iter_limit": 2,
    "eqsat_time_limit": 60,
    "important_cvec_offsets": 5,
    "str_int_variables": 1,
    "complete_cvec": false,
    "no_xor": false,
    "no_shift": false,
    "num_fuzz": 4,
    "use_smt": false,
    "do_final_run": false
}
#+end_src

#+name: baseline-gen-eqs
#+begin_src json
{
    "lhs": "(+ (+ ?a ?b) (+ ?c ?d))",
    "rhs": "(+ (+ ?c ?a) (+ ?b ?d))",
    "bidirectional": true
},
{
    "lhs": "(* (* ?a ?b) (* ?c ?d))",
    "rhs": "(* (* ?d ?b) (* ?a ?c))",
    "bidirectional": true
},
{
    "lhs": "(+ ?a (+ ?b ?c))",
    "rhs": "(+ ?b (+ ?a ?c))",
    "bidirectional": false
},
{
    "lhs": "(* ?a (* ?b ?c))",
    "rhs": "(* ?c (* ?a ?b))",
    "bidirectional": true
},
{
    "lhs": "(+ (* ?a ?b) (* ?a ?c))",
    "rhs": "(* ?a (+ ?b ?c))",
    "bidirectional": true
},
{
    "lhs": "(* ?a (* ?b ?c))",
    "rhs": "(* 1 (* ?a (* ?b ?c)))",
    "bidirectional": true
},
{
    "lhs": "(+ ?a (+ ?b ?c))",
    "rhs": "(+ 0 (+ ?a (+ ?b ?c)))",
    "bidirectional": true
},
{
    "lhs": "(+ ?a (+ 0 (* ?b ?c)))",
    "rhs": "(+ ?a (* ?b ?c))",
    "bidirectional": true
},
{
    "lhs": "(* ?a ?b)",
    "rhs": "(* ?b ?a)",
    "bidirectional": false
},
{
    "lhs": "(+ ?a ?b)",
    "rhs": "(+ ?b ?a)",
    "bidirectional": false
},
{
    "lhs": "(* ?a ?b)",
    "rhs": "(* ?b (* 1 ?a))",
    "bidirectional": true
},
{
    "lhs": "(+ ?a ?a)",
    "rhs": "(* ?a 2)",
    "bidirectional": true
},
{
    "lhs": "(* 0 ?a)",
    "rhs": "0",
    "bidirectional": false
},
{
    "lhs": "(+ 0 ?a)",
    "rhs": "(* 1 ?a)",
    "bidirectional": true
}
#+end_src

#+name: tuning-eqs
#+begin_src json
{
    "lhs": "(* ?a (+ ?b ?c))",
    "rhs": "(+ (* ?a ?b) (* ?a ?c))",
    "bidirectional": false 
}
#+end_src

#+begin_src json :results file :file "rulesets/tuning.json" :noweb yes
{
	<<tuning-params>>,
    "time": 1.5439685,
    "num_rules": 15,
    "smt_unknown": 0,
    "eqs": [
	    <<tuning-eqs>>
    ]
}
#+end_src

#+RESULTS:
[[file:tuning.json]]

#+name: q-prod-tuning-raw-data
#+call: egg-rewrite(bench="q-prod", rules="rulesets/tuning.json")

#+RESULTS: q-prod-tuning-raw-data
#+begin_example
   Compiling dios-egraphs v0.1.0 (/home/samthomas/Research/diospyros/src/dios-egraphs)
warning: unused import: `binopsearcher::build_binop_or_zero_rule`
 --> src/rules.rs:7:5
  |
7 |     binopsearcher::build_binop_or_zero_rule,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:28:4
   |
28 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 2 warnings emitted

    Finished release [optimized] target(s) in 2.64s
     Running `src/dios-egraphs/target/release/dios-egraphs q-prod-out/spec.rkt --no-ac --rules rulesets/tuning.json`
Running egg with timeout 180s, width: 2
[
    Rewrite {
        name: "sqrt-1-inv-rev",
        long_name: "\"(sqrt 1)\" => \"1\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-minus",
        long_name: "\"(neg ?a)\" => \"(- 0 ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "div-1-inv",
        long_name: "\"?a\" => \"(/ ?a 1)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-neg",
        long_name: "\"(neg (neg ?a))\" => \"?a\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_2_lr",
        long_name: "{ lpat } => { rpat }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_4_lr-rev",
        long_name: "{ rpat.clone() } => { lpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-minus-zero-rev",
        long_name: "\"(- 0 ?a)\" => \"(neg ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "add-0",
        long_name: "\"(+ 0 ?a)\" => \"?a\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_0_lr-rev",
        long_name: "{ rpat.clone() } => { lpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_0_lr",
        long_name: "{ lpat.clone() } => { rpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg_unop",
        long_name: "{ searcher } => { applier }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-sgn-rev",
        long_name: "\"(sgn (neg ?a))\" => \"(neg (sgn ?a))\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "mul-1",
        long_name: "\"(* 1 ?a)\" => \"?a\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_3_lr",
        long_name: "{ lpat } => { rpat }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-zero-inv",
        long_name: "\"0\" => \"(neg 0)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-neg-rev",
        long_name: "\"?a\" => \"(neg (neg ?a))\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-zero-inv-rev",
        long_name: "\"(neg 0)\" => \"0\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "vec-mac-add-mul",
        long_name: "\"(VecAdd ?v0 (VecMul ?v1 ?v2))\" => \"(VecMAC ?v0 ?v1 ?v2)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-minus-zero",
        long_name: "\"(neg ?a)\" => \"(- 0 ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "add-0-inv",
        long_name: "\"?a\" => \"(+ 0 ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "mul-0",
        long_name: "\"(* 0 ?a)\" => \"0\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-minus-rev",
        long_name: "\"(- 0 ?a)\" => \"(neg ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "expand-zero-get",
        long_name: "\"0\" => \"(Get 0 0)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "div-1",
        long_name: "\"(/ ?a 1)\" => \"?a\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "neg-sgn",
        long_name: "\"(neg (sgn ?a))\" => \"(sgn (neg ?a))\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "sqrt-1-inv",
        long_name: "\"1\" => \"(sqrt 1)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "mul-1-inv",
        long_name: "\"?a\" => \"(* 1 ?a)\"",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_1_lr",
        long_name: "{ lpat } => { rpat }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "litvec",
        long_name: "{ searcher } => { applier }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "ruler_4_lr",
        long_name: "{ lpat.clone() } => { rpat.clone() }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
    Rewrite {
        name: "vec-mac",
        long_name: "{ searcher } => { applier }",
        searcher: "<< searcher >>",
        applier: "<< applier >>",
    },
]
Starting run with 31 rules
Egraph big big? 102
Egraph cost? 503.5590000000001
Egraph big big? 624
Egraph cost? 503.5590000000001
Egraph big big? 1336
Egraph cost? 502.76099999999997
Egraph big big? 2195
Egraph cost? 502.66200000000003
Egraph big big? 3203
Egraph cost? 502.66200000000003
Egraph big big? 3713
Egraph cost? 502.66200000000003
Egraph big big? 3713
Egraph cost? 502.66200000000003
Egraph big big? 3239
Egraph cost? 502.66200000000003
Egraph big big? 3257
Egraph cost? 502.66200000000003
Egraph big big? 3277
Egraph cost? 502.66200000000003
Egraph big big? 3277
Egraph cost? 502.66200000000003
Egraph big big? 5829
Egraph cost? 496.369
Egraph big big? 9188
Egraph cost? 495.87399999999997
Egraph big big? 9188
Egraph cost? 495.87399999999997
Egraph big big? 14435
Egraph cost? 495.87399999999997
Egraph big big? 14435
Egraph cost? 495.87399999999997
Egraph big big? 14435
Egraph cost? 495.87399999999997
Egraph big big? 16820
Egraph cost? 495.87399999999997
Egraph big big? 16820
Egraph cost? 495.87399999999997
Egraph big big? 16820
Egraph cost? 495.87399999999997
Egraph big big? 29429
Egraph cost? 287.20899999999995
Runner report
=============
  Stop reason: NodeLimit(30340)
  Iterations: 22
  Egraph size: 30340 nodes, 3338 classes, 30340 memo
  Rebuilds: 5932, 269.64 per iter
  Total time: 0.165206892
    Search:  (0.52) 0.08618588600000002
    Apply:   (0.32) 0.052712844
    Rebuild: (0.16) 0.026279508
Stopped after 22 iterations, reason: Some(NodeLimit(30340))

Cost: 287.20899999999995
#+end_example

**** Commutativity

#+call: egg-rewrite(bench="q-prod", rules="rulesets/commutativity.json")

#+name: q-prod-commute-raw-data
#+RESULTS: q-prod-commute-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.04s
     Running `src/dios-egraphs/target/release/dios-egraphs q-prod-out/spec.rkt --no-ac --rules rulesets/commutativity.json`
Running egg with timeout 180s, width: 2
Starting run with 49 rules
Egraph big big? 102
Egraph cost? 503.5590000000001
Egraph big big? 604
Egraph cost? 502.659
Egraph big big? 2251
Egraph cost? 501.6600000000001
Egraph big big? 6050
Egraph cost? 492.76
Egraph big big? 8279
Egraph cost? 492.56199999999995
Egraph big big? 8517
Egraph cost? 492.56199999999995
Egraph big big? 8517
Egraph cost? 492.56199999999995
Egraph big big? 12027
Egraph cost? 492.56199999999995
Egraph big big? 12773
Egraph cost? 492.56199999999995
Egraph big big? 12890
Egraph cost? 492.56199999999995
Egraph big big? 12968
Egraph cost? 492.56199999999995
Egraph big big? 12968
Egraph cost? 492.56199999999995
Egraph big big? 13075
Egraph cost? 492.56199999999995
Egraph big big? 13075
Egraph cost? 492.56199999999995
Egraph big big? 15834
Egraph cost? 492.56199999999995
Egraph big big? 18486
Egraph cost? 492.56199999999995
Egraph big big? 18752
Egraph cost? 492.56199999999995
Egraph big big? 18764
Egraph cost? 492.56199999999995
Egraph big big? 18764
Egraph cost? 492.56199999999995
Egraph big big? 18764
Egraph cost? 492.56199999999995
Egraph big big? 17318
Egraph cost? 492.56199999999995
Egraph big big? 17932
Egraph cost? 492.56199999999995
Egraph big big? 18546
Egraph cost? 492.56199999999995
Egraph big big? 18853
Egraph cost? 492.56199999999995
Egraph big big? 18853
Egraph cost? 492.56199999999995
Egraph big big? 18853
Egraph cost? 492.56199999999995
Egraph big big? 19160
Egraph cost? 492.56199999999995
Egraph big big? 19160
Egraph cost? 492.56199999999995
Egraph big big? 21644
Egraph cost? 492.56199999999995
Egraph big big? 21644
Egraph cost? 492.56199999999995
Egraph big big? 21644
Egraph cost? 492.56199999999995
Egraph big big? 21644
Egraph cost? 492.56199999999995
Egraph big big? 26881
Egraph cost? 492.56199999999995
Runner report
=============
  Stop reason: NodeLimit(35551)
  Iterations: 34
  Egraph size: 35551 nodes, 8983 classes, 35551 memo
  Rebuilds: 14719, 432.91 per iter
  Total time: 6.304893361999999
    Search:  (0.98) 6.150557114999999
    Apply:   (0.02) 0.11520915500000001
    Rebuild: (0.01) 0.039107113
Stopped after 34 iterations, reason: Some(NodeLimit(35551))

Cost: 492.56199999999995
#+end_example

**** Associativity

#+call: egg-rewrite(bench="q-prod", rules="rulesets/associativity.json")

#+name: q-prod-assoc-raw-data
#+RESULTS: q-prod-assoc-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.01s
     Running `src/dios-egraphs/target/release/dios-egraphs q-prod-out/spec.rkt --no-ac --rules rulesets/associativity.json`
Running egg with timeout 180s, width: 2
Starting run with 47 rules
Egraph big big? 102
Egraph cost? 503.5590000000001
Egraph big big? 596
Egraph cost? 502.659
Egraph big big? 2235
Egraph cost? 496.05999999999995
Egraph big big? 4959
Egraph cost? 492.562
Egraph big big? 5818
Egraph cost? 492.562
Egraph big big? 5813
Egraph cost? 492.562
Egraph big big? 5813
Egraph cost? 492.562
Egraph big big? 7663
Egraph cost? 492.562
Egraph big big? 7967
Egraph cost? 492.562
Egraph big big? 8465
Egraph cost? 492.562
Egraph big big? 8501
Egraph cost? 492.562
Egraph big big? 8543
Egraph cost? 492.562
Egraph big big? 8543
Egraph cost? 492.562
Egraph big big? 9101
Egraph cost? 492.562
Egraph big big? 9101
Egraph cost? 492.562
Egraph big big? 10305
Egraph cost? 492.562
Egraph big big? 11643
Egraph cost? 492.562
Egraph big big? 11790
Egraph cost? 492.562
Egraph big big? 11832
Egraph cost? 492.562
Egraph big big? 11832
Egraph cost? 492.562
Egraph big big? 11832
Egraph cost? 492.562
Egraph big big? 12029
Egraph cost? 492.562
Egraph big big? 12475
Egraph cost? 492.562
Egraph big big? 12921
Egraph cost? 492.562
Egraph big big? 13144
Egraph cost? 492.562
Egraph big big? 13144
Egraph cost? 492.562
Egraph big big? 13144
Egraph cost? 492.562
Egraph big big? 13144
Egraph cost? 492.562
Egraph big big? 19940
Egraph cost? 492.562
Egraph big big? 19806
Egraph cost? 492.562
Egraph big big? 19806
Egraph cost? 492.562
Runner report
=============
  Stop reason: NodeLimit(31659)
  Iterations: 32
  Egraph size: 31659 nodes, 8119 classes, 31659 memo
  Rebuilds: 10118, 316.19 per iter
  Total time: 2.105059154
    Search:  (0.94) 1.9799924080000004
    Apply:   (0.04) 0.09445557200000002
    Rebuild: (0.01) 0.030591115000000002
Stopped after 32 iterations, reason: Some(NodeLimit(31659))

Cost: 492.562
#+end_example

**** Commute + Associativity

#+call: egg-rewrite(bench="q-prod", rules="rulesets/commute_assoc.json")

#+name: q-prod-commute-assoc-raw-data
#+RESULTS: q-prod-commute-assoc-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.01s
     Running `src/dios-egraphs/target/release/dios-egraphs q-prod-out/spec.rkt --no-ac --rules rulesets/commute_assoc.json`
Running egg with timeout 180s, width: 2
Starting run with 47 rules
Egraph big big? 102
Egraph cost? 503.5590000000001
Egraph big big? 627
Egraph cost? 502.659
Egraph big big? 2503
Egraph cost? 496.05999999999995
Egraph big big? 5047
Egraph cost? 492.562
Egraph big big? 6045
Egraph cost? 492.562
Egraph big big? 5930
Egraph cost? 492.562
Egraph big big? 6032
Egraph cost? 492.562
Egraph big big? 6010
Egraph cost? 492.562
Egraph big big? 6013
Egraph cost? 492.562
Egraph big big? 7084
Egraph cost? 492.562
Egraph big big? 7504
Egraph cost? 492.562
Egraph big big? 7563
Egraph cost? 492.562
Egraph big big? 7603
Egraph cost? 492.562
Egraph big big? 7623
Egraph cost? 492.562
Egraph big big? 7623
Egraph cost? 492.562
Egraph big big? 8093
Egraph cost? 492.562
Egraph big big? 8093
Egraph cost? 492.562
Egraph big big? 8679
Egraph cost? 492.562
Egraph big big? 8853
Egraph cost? 492.562
Egraph big big? 9541
Egraph cost? 492.562
Egraph big big? 9225
Egraph cost? 492.562
Egraph big big? 9321
Egraph cost? 492.562
Egraph big big? 9408
Egraph cost? 492.562
Egraph big big? 10080
Egraph cost? 492.562
Egraph big big? 11246
Egraph cost? 492.562
Egraph big big? 11776
Egraph cost? 492.562
Egraph big big? 11776
Egraph cost? 492.562
Egraph big big? 13088
Egraph cost? 492.562
Egraph big big? 14050
Egraph cost? 492.562
Egraph big big? 14544
Egraph cost? 492.562
Egraph big big? 14544
Egraph cost? 492.562
Egraph big big? 14544
Egraph cost? 492.562
Egraph big big? 14852
Egraph cost? 492.562
Egraph big big? 14852
Egraph cost? 492.562
Egraph big big? 14852
Egraph cost? 492.562
Runner report
=============
  Stop reason: NodeLimit(31622)
  Iterations: 36
  Egraph size: 31622 nodes, 4737 classes, 31622 memo
  Rebuilds: 7450, 206.94 per iter
  Total time: 34.566774947
    Search:  (1.00) 34.44238231999999
    Apply:   (0.00) 0.09765832100000005
    Rebuild: (0.00) 0.026723364999999995
Stopped after 36 iterations, reason: Some(NodeLimit(31622))

Cost: 492.562
#+end_example

**** Commute + Zero

#+call: egg-rewrite(bench="q-prod", rules="rulesets/commute_zero.json")

#+name: q-prod-commute-zero-raw-data
#+RESULTS: q-prod-commute-zero-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.04s
     Running `src/dios-egraphs/target/release/dios-egraphs q-prod-out/spec.rkt --no-ac --rules rulesets/commute_zero.json`
Running egg with timeout 180s, width: 2
Starting run with 39 rules
Egraph big big? 102
Egraph cost? 503.5590000000001
Egraph big big? 639
Egraph cost? 502.659
Egraph big big? 2002
Egraph cost? 501.6600000000001
Egraph big big? 3320
Egraph cost? 492.76
Egraph big big? 5418
Egraph cost? 491.566
Egraph big big? 6448
Egraph cost? 491.566
Egraph big big? 6448
Egraph cost? 491.566
Egraph big big? 7740
Egraph cost? 491.566
Egraph big big? 7191
Egraph cost? 491.566
Egraph big big? 9583
Egraph cost? 491.566
Egraph big big? 9583
Egraph cost? 491.566
Egraph big big? 10252
Egraph cost? 491.566
Egraph big big? 10252
Egraph cost? 491.566
Egraph big big? 11827
Egraph cost? 490.56399999999996
Egraph big big? 13944
Egraph cost? 489.564
Egraph big big? 18664
Egraph cost? 489.564
Egraph big big? 22280
Egraph cost? 489.564
Egraph big big? 22280
Egraph cost? 489.564
Egraph big big? 23164
Egraph cost? 489.564
Egraph big big? 23164
Egraph cost? 489.564
Egraph big big? 23164
Egraph cost? 489.564
Egraph big big? 23164
Egraph cost? 489.564
Runner report
=============
  Stop reason: TimeLimit(456.308250833)
  Iterations: 23
  Egraph size: 23164 nodes, 3255 classes, 23164 memo
  Rebuilds: 8629, 375.17 per iter
  Total time: 456.23251924299996
    Search:  (1.00) 456.16283961600004
    Apply:   (0.00) 0.04570820399999999
    Rebuild: (0.00) 0.023931202
Stopped after 23 iterations, reason: Some(TimeLimit(456.308250833))

Cost: 489.564
#+end_example

**** Commute + Zero + One

#+call: egg-rewrite(bench="q-prod", rules="rulesets/commute_zero_one.json")

#+name: q-prod-commute-zero-one-raw-data
#+RESULTS: q-prod-commute-zero-one-raw-data
#+begin_example
warning: function is never used: `filter_applicable_rules`
  --> src/rules.rs:27:4
   |
27 | fn filter_applicable_rules(rules: &mut Vec<Rewrite<VecLang, ()>>, prog: &RecExpr<VecLang>) {
   |    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted

    Finished release [optimized] target(s) in 0.05s
     Running `src/dios-egraphs/target/release/dios-egraphs q-prod-out/spec.rkt --no-ac --rules rulesets/commute_zero_one.json`
Running egg with timeout 180s, width: 2
Starting run with 37 rules
Egraph big big? 102
Egraph cost? 503.5590000000001
Egraph big big? 671
Egraph cost? 502.659
Egraph big big? 2219
Egraph cost? 500.8620000000001
Egraph big big? 4188
Egraph cost? 491.863
Egraph big big? 6709
Egraph cost? 491.66499999999996
Egraph big big? 8082
Egraph cost? 491.66499999999996
Egraph big big? 8082
Egraph cost? 491.66499999999996
Egraph big big? 8830
Egraph cost? 491.66499999999996
Egraph big big? 9420
Egraph cost? 491.66499999999996
Egraph big big? 9790
Egraph cost? 491.66499999999996
Egraph big big? 9790
Egraph cost? 491.66499999999996
Egraph big big? 9790
Egraph cost? 491.66499999999996
Egraph big big? 13335
Egraph cost? 490.56399999999996
Egraph big big? 17968
Egraph cost? 490.56399999999996
Egraph big big? 19112
Egraph cost? 490.56399999999996
Egraph big big? 19112
Egraph cost? 490.56399999999996
Egraph big big? 20212
Egraph cost? 490.56399999999996
Egraph big big? 20212
Egraph cost? 490.56399999999996
Egraph big big? 25822
Egraph cost? 490.56399999999996
Egraph big big? 28572
Egraph cost? 490.56399999999996
Egraph big big? 28572
Egraph cost? 490.56399999999996
Egraph big big? 28572
Egraph cost? 490.56399999999996
Egraph big big? 28572
Egraph cost? 490.56399999999996
Egraph big big? 28572
Egraph cost? 490.56399999999996
Runner report
=============
  Stop reason: NodeLimit(30244)
  Iterations: 25
  Egraph size: 30244 nodes, 3289 classes, 30244 memo
  Rebuilds: 9855, 394.20 per iter
  Total time: 16.585870781
    Search:  (0.99) 16.489137033000002
    Apply:   (0.00) 0.07040924
    Rebuild: (0.00) 0.026299406
Stopped after 25 iterations, reason: Some(NodeLimit(30244))

Cost: 490.56399999999996
#+end_example

*** Pictures!

**** Mat Mul 
***** No Ruler
#+name: mat-mul-no-ruler-size
#+call: get-size(no-ruler-raw-data)

#+RESULTS: mat-mul-size
| Size |
|------|
|   29 |
|  128 |
|  277 |
|  380 |
|  442 |
|  454 |

#+name: mat-mul-no-ruler-cost
#+call: get-cost(no-ruler-raw-data)

#+RESULTS: mat-mul-cost
|               Cost |
|--------------------|
|            212.148 |
| 206.54799999999997 |
|  4.552000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |

#+call: zip-table(mat-mul-no-ruler-size, mat-mul-no-ruler-cost)

#+name: mat-mul-no-ruler
#+RESULTS:
|  29 |            212.148 |
| 128 | 206.54799999999997 |
| 277 |  4.552000000000001 |
| 380 |  4.156000000000001 |
| 442 |  4.156000000000001 |
| 454 |  4.156000000000001 |
***** Baseline

#+name: mat-mul-baseline-size
#+call: get-size(baseline-raw-data)

#+RESULTS: size
|  Size |
|-------|
|    29 |
|   164 |
|   635 |
|  2332 |
|  4478 |
|  5777 |
|  5650 |
|  5807 |
|  5941 |
|  8943 |
|  9775 |
| 10138 |
| 10108 |
| 10108 |
| 10600 |
| 10600 |
| 11994 |
| 11994 |
| 11994 |
| 11994 |
| 21946 |
| 22018 |
| 22018 |
| 22018 |
| 22018 |
| 22018 |
| 22018 |

#+name: mat-mul-baseline-cost
#+call: get-cost(baseline-raw-data)

#+RESULTS: cost
|               Cost |
|--------------------|
|            212.148 |
| 206.54799999999997 |
|              4.552 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |

#+name: mat-mul-baseline
#+call: zip-table(mat-mul-baseline-size, mat-mul-baseline-cost)

#+RESULTS: mat-mul-baseline
|    29 |            212.148 |
|   164 | 206.54799999999997 |
|   635 |              4.552 |
|  2332 |  4.156000000000001 |
|  4478 |  4.156000000000001 |
|  5777 |  4.156000000000001 |
|  5650 |  4.156000000000001 |
|  5807 |  4.156000000000001 |
|  5941 |  4.156000000000001 |
|  8943 |  4.156000000000001 |
|  9775 |  4.156000000000001 |
| 10138 |  4.156000000000001 |
| 10108 |  4.156000000000001 |
| 10108 |  4.156000000000001 |
| 10600 |  4.156000000000001 |
| 10600 |  4.156000000000001 |
| 11994 |  4.156000000000001 |
| 11994 |  4.156000000000001 |
| 11994 |  4.156000000000001 |
| 11994 |  4.156000000000001 |
| 21946 |  4.156000000000001 |
| 22018 |  4.156000000000001 |
| 22018 |  4.156000000000001 |
| 22018 |  4.156000000000001 |
| 22018 |  4.156000000000001 |
| 22018 |  4.156000000000001 |
| 22018 |  4.156000000000001 |

***** Commute

#+name: mat-mul-commute-size
#+call: get-size(commute-raw-data)


#+name: mat-mul-commute-cost
#+call: get-cost(commute-raw-data)

#+name: mat-mul-commute
#+call: zip-table(mat-mul-commute-size, mat-mul-commute-cost)

#+RESULTS: mat-mul-commute
|    29 |            212.148 |
|   156 | 206.54799999999997 |
|   646 |              4.552 |
|  2036 |  4.156000000000001 |
|  3935 |  4.156000000000001 |
|  4584 |  4.156000000000001 |
|  4689 |  4.156000000000001 |
|  4781 |  4.156000000000001 |
|  4810 |  4.156000000000001 |
|  6947 |  4.156000000000001 |
|  8285 |  4.156000000000001 |
|  8830 |  4.156000000000001 |
|  8918 |  4.156000000000001 |
|  8902 |  4.156000000000001 |
|  8902 |  4.156000000000001 |
|  9480 |  4.156000000000001 |
|  9480 |  4.156000000000001 |
| 10740 |  4.156000000000001 |
| 10740 |  4.156000000000001 |
| 10740 |  4.156000000000001 |
| 10740 |  4.156000000000001 |
| 19676 |  4.156000000000001 |
| 19734 |  4.156000000000001 |
| 19734 |  4.156000000000001 |
| 19734 |  4.156000000000001 |
| 19734 |  4.156000000000001 |
| 19734 |  4.156000000000001 |
| 19734 |  4.156000000000001 |

***** Assoc

#+name: mat-mul-assoc-size
#+call: get-size(assoc-raw-data)


#+name: mat-mul-assoc-cost
#+call: get-cost(assoc-raw-data)

#+name: mat-mul-assoc
#+call: zip-table(mat-mul-assoc-size, mat-mul-assoc-cost)

#+RESULTS: mat-mul-assoc
|    29 |            212.148 |
|   166 | 206.54799999999997 |
|   704 |              4.552 |
|  2431 |  4.156000000000001 |
|  4739 |  4.156000000000001 |
|  5304 |  4.156000000000001 |
|  5976 |  4.156000000000001 |
|  6427 |  4.156000000000001 |
|  6716 |  4.156000000000001 |
|  8770 |  4.156000000000001 |
|  9092 |  4.156000000000001 |
|  9350 |  4.156000000000001 |
|  9352 |  4.156000000000001 |
|  9352 |  4.156000000000001 |
|  9405 |  4.156000000000001 |
|  9905 |  4.156000000000001 |
|  9905 |  4.156000000000001 |
|  9905 |  4.156000000000001 |
| 11826 |  4.156000000000001 |
| 11826 |  4.156000000000001 |
| 11826 |  4.156000000000001 |
| 11826 |  4.156000000000001 |
| 11826 |  4.156000000000001 |
| 29642 |  4.156000000000001 |
| 29642 |  4.156000000000001 |
| 29642 |  4.156000000000001 |
| 29642 |  4.156000000000001 |
| 29642 |  4.156000000000001 |
| 29642 |  4.156000000000001 |
| 29642 |  4.156000000000001 |
| 29642 |  4.156000000000001 |
| 29786 |  4.156000000000001 |
| 29956 |  4.156000000000001 |
| 29690 |  4.156000000000001 |
| 29690 |  4.156000000000001 |

***** Commute + Assoc

#+name: mat-mul-commute-assoc-size
#+call: get-size(commute-assoc-raw-data)


#+name: mat-mul-commute-assoc-cost
#+call: get-cost(commute-assoc-raw-data)

#+name: mat-mul-commute-assoc
#+call: zip-table(mat-mul-commute-assoc-size, mat-mul-assoc-cost)

#+RESULTS: mat-mul-commute-assoc
|    29 |            212.148 |
|   164 | 206.54799999999997 |
|   776 |              4.552 |
|  1885 |  4.156000000000001 |
|  3574 |  4.156000000000001 |
|  4868 |  4.156000000000001 |
|  5229 |  4.156000000000001 |
|  5289 |  4.156000000000001 |
|  5319 |  4.156000000000001 |
|  6016 |  4.156000000000001 |
|  6204 |  4.156000000000001 |
|  6364 |  4.156000000000001 |
|  6424 |  4.156000000000001 |
|  6424 |  4.156000000000001 |
|  7518 |  4.156000000000001 |
|  7518 |  4.156000000000001 |
|  7518 |  4.156000000000001 |
| 11360 |  4.156000000000001 |
| 11360 |  4.156000000000001 |
| 11360 |  4.156000000000001 |

***** Commute + Zero

#+name: mat-mul-commute-zero-size
#+call: get-size(commute-zero-raw-data)


#+name: mat-mul-commute-zero-cost
#+call: get-cost(commute-zero-raw-data)

#+name: mat-mul-commute-zero
#+call: zip-table(mat-mul-commute-zero-size, mat-mul-assoc-cost)

#+RESULTS: mat-mul-commute-zero
|   29 |            212.148 |
|  169 | 206.54799999999997 |
|  590 |              4.552 |
| 1709 |  4.156000000000001 |
| 3538 |  4.156000000000001 |
| 4706 |  4.156000000000001 |
| 5159 |  4.156000000000001 |
| 5159 |  4.156000000000001 |
| 6225 |  4.156000000000001 |
| 5643 |  4.156000000000001 |
| 5746 |  4.156000000000001 |
| 5746 |  4.156000000000001 |
| 6230 |  4.156000000000001 |
| 6230 |  4.156000000000001 |
| 7253 |  4.156000000000001 |
| 6912 |  4.156000000000001 |
| 6912 |  4.156000000000001 |
| 6912 |  4.156000000000001 |
| 6912 |  4.156000000000001 |
| 6912 |  4.156000000000001 |
| 6912 |  4.156000000000001 |
| 6912 |  4.156000000000001 |

***** Commute + Zero + One

#+name: mat-mul-commute-zero-one-size
#+call: get-size(commute-zero-one-raw-data)


#+name: mat-mul-commute-zero-one-cost
#+call: get-cost(commute-zero-one-raw-data)

#+name: mat-mul-commute-zero-one
#+call: zip-table(mat-mul-commute-zero-one-size, mat-mul-assoc-cost)

#+RESULTS: mat-mul-commute-zero-one
|    29 |            212.148 |
|   198 | 206.54799999999997 |
|   802 |              4.552 |
|  2648 |  4.156000000000001 |
|  4936 |  4.156000000000001 |
|  6062 |  4.156000000000001 |
|  6212 |  4.156000000000001 |
|  6212 |  4.156000000000001 |
|  7372 |  4.156000000000001 |
|  8031 |  4.156000000000001 |
|  7894 |  4.156000000000001 |
|  7910 |  4.156000000000001 |
|  7910 |  4.156000000000001 |
|  7910 |  4.156000000000001 |
|  9722 |  4.156000000000001 |
|  9269 |  4.156000000000001 |
|  9269 |  4.156000000000001 |
| 11534 |  4.156000000000001 |
| 12893 |  4.156000000000001 |
| 12893 |  4.156000000000001 |
|  8816 |  4.156000000000001 |
|  8816 |  4.156000000000001 |
|  8816 |  4.156000000000001 |
| 12722 |  4.156000000000001 |
| 12722 |  4.156000000000001 |

**** 2d-conv 
***** No Ruler
#+name: 2d-conv-no-ruler-size
#+call: get-size(2d-conv-no-ruler-raw-data)

#+name: 2d-conv-no-ruler-cost
#+call: get-cost(2d-conv-no-ruler-raw-data)

#+name: 2d-conv-no-ruler
#+call: zip-table(2d-conv-no-ruler-size, 2d-conv-no-ruler-cost)

#+RESULTS[98ce1a4db2ab10cdae338df0a82310d49179e25e]: 2d-conv-no-ruler
|   95 |  856.9159999999999 |
|  423 |  838.5199999999999 |
|  975 | 429.95000000000005 |
| 1464 |  425.7680000000001 |
| 1897 | 25.185999999999996 |
| 2101 | 24.987999999999996 |
| 2159 | 24.987999999999996 |
| 2165 | 24.987999999999996 |

***** Baseline

#+name: 2d-conv-baseline-size
#+call: get-size(2d-conv-baseline-raw-data)

#+name: 2d-conv-baseline-cost
#+call: get-cost(2d-conv-baseline-raw-data)

#+name: 2d-conv-baseline
#+call: zip-table(2d-conv-baseline-size, 2d-conv-baseline-cost)

#+RESULTS[acdd0b7b08d37b5142456a41737481d88302a928]: 2d-conv-baseline

***** Commute

#+name: 2d-conv-commute-size
#+call: get-size(commute-raw-data)

#+name: 2d-conv-commute-cost
#+call: get-cost(commute-raw-data)

#+name: 2d-conv-commute
#+call: zip-table(2d-conv-commute-size, 2d-conv-commute-cost)

***** Assoc

#+name: 2d-conv-assoc-size
#+call: get-size(assoc-raw-data)

#+name: 2d-conv-assoc-cost
#+call: get-cost(assoc-raw-data)

#+name: 2d-conv-assoc
#+call: zip-table(2d-conv-assoc-size, 2d-conv-assoc-cost)

***** Commute + Assoc

#+name: 2d-conv-commute-assoc-size
#+call: get-size(commute-assoc-raw-data)

#+name: 2d-conv-commute-assoc-cost
#+call: get-cost(commute-assoc-raw-data)

#+name: 2d-conv-commute-assoc
#+call: zip-table(2d-conv-commute-assoc-size, 2d-conv-assoc-cost)

***** Commute + Zero

#+name: 2d-conv-commute-zero-size
#+call: get-size(commute-zero-raw-data)

#+name: 2d-conv-commute-zero-cost
#+call: get-cost(commute-zero-raw-data)

#+name: 2d-conv-commute-zero
#+call: zip-table(2d-conv-commute-zero-size, 2d-conv-assoc-cost)

***** Commute + Zero + One

#+name: 2d-conv-commute-zero-one-size
#+call: get-size(commute-zero-one-raw-data)

#+name: 2d-conv-commute-zero-one-cost
#+call: get-cost(commute-zero-one-raw-data)

#+name: 2d-conv-commute-zero-one
#+call: zip-table(2d-conv-commute-zero-one-size, 2d-conv-assoc-cost)

**** qr-decomp

***** No Ruler
#+name: qr-decomp-no-ruler-size
#+call: get-size(qr-decomp-no-ruler-raw-data)

#+RESULTS: qr-decomp-no-ruler-size
| Size |
|------|
|   29 |
|  128 |
|  277 |
|  380 |
|  442 |
|  454 |

#+name: qr-decomp-no-ruler-cost
#+call: get-cost(qr-decomp-no-ruler-raw-data)

#+RESULTS: qr-decomp-no-ruler-cost
|               Cost |
|--------------------|
|            212.148 |
| 206.54799999999997 |
|  4.552000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |
|  4.156000000000001 |

#+name: qr-decomp-no-ruler
#+call: zip-table(qr-decomp-no-ruler-size, qr-decomp-no-ruler-cost)

#+RESULTS[86917068efb8450d314231a13083b07859fe35c3]: qr-decomp-no-ruler
|  180 | 163590.465 |
|  746 | 163590.465 |
| 1513 | 163590.465 |
| 2076 | 163590.465 |
| 2694 | 163590.465 |
| 3213 | 163590.465 |
| 3733 | 163590.465 |
| 4301 | 163590.465 |
| 4638 | 163590.465 |
| 4796 | 163590.465 |
| 4892 |  128209.19 |
| 4943 |  128209.19 |
| 4970 |  128209.19 |
| 5561 |  128209.19 |
| 5747 |  128209.19 |
| 5765 |  128209.19 |
| 5793 |  128209.19 |
| 5821 |  128209.19 |
| 5835 |  128209.19 |
| 6209 |  128209.19 |
| 6209 |  128209.19 |

***** Baseline

#+name: qr-decomp-baseline-size
#+call: get-size(qr-decomp-baseline-raw-data)

#+name: qr-decomp-baseline-cost
#+call: get-cost(qr-decomp-baseline-raw-data)

#+name: qr-decomp-baseline
#+call: zip-table(qr-decomp-baseline-size, qr-decomp-baseline-cost)

#+RESULTS[478ed1d9eaa2a9f8f9bdd526f76d56f5fdb08d4d]: qr-decomp-baseline
|   180 |         163590.465 |
|  1191 |         163590.465 |
|  4056 |         163590.465 |
|  6442 |         163590.465 |
|  6936 |         163590.465 |
|  6936 |         163590.465 |
| 10314 |         163590.465 |
| 10423 |         163590.465 |
| 10439 |         163590.465 |
| 10455 |         163590.465 |
| 10455 |         163590.465 |
| 10455 |         163590.465 |
| 13026 | 163590.46499999997 |
| 15119 | 163590.46499999997 |
| 16094 | 163590.46499999997 |
| 16426 | 163590.46499999997 |
| 16615 | 163590.46499999997 |
| 16615 | 163590.46499999997 |
| 19677 | 163590.46499999997 |
| 19677 | 163590.46499999997 |
| 19905 | 163590.46499999997 |
| 20351 | 163590.46499999997 |
| 21243 | 163590.46499999997 |
| 21243 | 163590.46499999997 |
| 21243 | 163590.46499999997 |
| 21243 | 163590.46499999997 |
| 21689 | 163590.46499999997 |
| 22135 | 163590.46499999997 |
| 22135 | 163590.46499999997 |
| 23044 | 163590.46499999997 |
| 23851 | 163590.46499999997 |
| 26494 | 163590.46499999997 |
| 29179 | 163590.46499999997 |
| 29179 | 163590.46499999997 |
| 27415 | 163590.46499999997 |
| 27415 | 163590.46499999997 |

***** Commute

#+name: qr-decomp-commute-size
#+call: get-size(qr-decomp-commute-raw-data)

#+name: qr-decomp-commute-cost
#+call: get-cost(qr-decomp-commute-raw-data)

#+name: qr-decomp-commute
#+call: zip-table(qr-decomp-commute-size, qr-decomp-commute-cost)

#+RESULTS[b0114e2b9bb4949d8c76ce43eddec801cf8d835b]: qr-decomp-commute
|   180 |         163590.465 |
|  1114 |         163590.465 |
|  4300 | 163590.46499999997 |
|  6617 | 163590.46499999997 |
|  7182 | 163590.46499999997 |
|  7170 | 163590.46499999997 |
|  7170 | 163590.46499999997 |
| 11111 | 163590.46499999997 |
| 11477 | 163590.46499999997 |
| 11505 | 163590.46499999997 |
| 11505 | 163590.46499999997 |
| 11505 | 163590.46499999997 |
| 13034 | 163590.46499999997 |
| 13384 | 163590.46499999997 |
| 13527 | 163590.46499999997 |
| 13640 | 163590.46499999997 |
| 13640 | 163590.46499999997 |
| 15784 | 163590.46499999997 |
| 15784 | 163590.46499999997 |
| 15784 | 163590.46499999997 |
| 15784 | 163590.46499999997 |
| 18636 | 163590.46499999997 |
| 23037 | 163590.46499999997 |
| 23450 | 163590.46499999997 |
| 23753 | 163590.46499999997 |
| 23854 | 163590.46499999997 |
| 23854 | 163590.46499999997 |
| 23009 | 163590.46499999997 |
| 23009 | 163590.46499999997 |
| 26753 | 163590.46499999997 |
| 26955 | 163590.46499999997 |
| 26955 | 163590.46499999997 |
| 23603 | 163590.46499999997 |
| 24100 | 163590.46499999997 |
| 24100 | 163590.46499999997 |

***** Assoc

#+name: qr-decomp-assoc-size
#+call: get-size(qr-decomp-assoc-raw-data)

#+name: qr-decomp-assoc-cost
#+call: get-cost(qr-decomp-assoc-raw-data)

#+name: qr-decomp-assoc
#+call: zip-table(qr-decomp-assoc-size, qr-decomp-assoc-cost)

#+RESULTS[b89715d036fffc453f19f47869caf3bd12db5849]: qr-decomp-assoc
|   180 |         163590.465 |
|  1175 |         163590.465 |
|  4736 | 163590.46499999997 |
|  6667 | 163590.46499999997 |
|  7510 | 163590.46499999997 |
|  7528 | 163590.46499999997 |
|  7528 | 163590.46499999997 |
| 12075 | 163590.46499999997 |
| 11883 | 163590.46499999997 |
| 11938 | 163590.46499999997 |
| 11944 | 163590.46499999997 |
| 11944 | 163590.46499999997 |
| 11944 | 163590.46499999997 |
| 16539 | 163590.46499999997 |
| 16849 | 163590.46499999997 |
| 17323 | 163590.46499999997 |
| 17581 | 163590.46499999997 |
| 17740 | 163590.46499999997 |
| 17858 | 163590.46499999997 |
| 20138 | 163590.46499999997 |
| 20138 | 163590.46499999997 |
| 20049 | 163590.46499999997 |
| 20049 | 163590.46499999997 |
| 23723 | 163590.46499999997 |
| 24933 | 163590.46499999997 |
| 24933 | 163590.46499999997 |
| 24933 | 163590.46499999997 |
| 23046 | 163590.46499999997 |
| 23563 | 163590.46499999997 |
| 23563 | 163590.46499999997 |
| 24080 | 163590.46499999997 |
| 25114 | 163590.46499999997 |
| 26865 | 163590.46499999997 |
| 26865 | 163590.46499999997 |
| 26865 | 163590.46499999997 |
| 26865 | 163590.46499999997 |
| 26865 | 163590.46499999997 |
| 26865 | 163590.46499999997 |

***** Commute + Assoc

#+name: qr-decomp-commute-assoc-size
#+call: get-size(qr-decomp-commute-assoc-raw-data)

#+name: qr-decomp-commute-assoc-cost
#+call: get-cost(qr-decomp-commute-assoc-raw-data)

#+name: qr-decomp-commute-assoc
#+call: zip-table(qr-decomp-commute-assoc-size, qr-decomp-assoc-cost)

#+RESULTS[885f01ff522d6f59c083c2f9d10e195f05f7e5a2]: qr-decomp-commute-assoc
|   180 |         163590.465 |
|  1204 |         163590.465 |
|  5183 | 163590.46499999997 |
|  5934 | 163590.46499999997 |
|  6559 | 163590.46499999997 |
|  6639 | 163590.46499999997 |
|  6644 | 163590.46499999997 |
|  6648 | 163590.46499999997 |
| 10475 | 163590.46499999997 |
| 11631 | 163590.46499999997 |
| 11995 | 163590.46499999997 |
| 12137 | 163590.46499999997 |
| 12137 | 163590.46499999997 |
| 12137 | 163590.46499999997 |
| 13649 | 163590.46499999997 |
| 14638 | 163590.46499999997 |
| 15264 | 163590.46499999997 |
| 15414 | 163590.46499999997 |
| 15414 | 163590.46499999997 |
| 17670 | 163590.46499999997 |
| 17670 | 163590.46499999997 |
| 17670 | 163590.46499999997 |
| 17670 | 163590.46499999997 |
| 17670 | 163590.46499999997 |
| 17670 | 163590.46499999997 |
| 17670 | 163590.46499999997 |

***** Commute + Zero

#+name: qr-decomp-commute-zero-size
#+call: get-size(qr-decomp-commute-zero-raw-data)

#+name: qr-decomp-commute-zero-cost
#+call: get-cost(qr-decomp-commute-zero-raw-data)

#+name: qr-decomp-commute-zero
#+call: zip-table(qr-decomp-commute-zero-size, qr-decomp-assoc-cost)

#+RESULTS[dc0dba0be2bce5e9ab115ad6fa503528282f3043]: qr-decomp-commute-zero
|   180 |         163590.465 |
|  1172 |         163590.465 |
|  4124 | 163590.46499999997 |
|  5111 | 163590.46499999997 |
|  5624 | 163590.46499999997 |
|  5624 | 163590.46499999997 |
|  9410 | 163590.46499999997 |
|  9684 | 163590.46499999997 |
|  9684 | 163590.46499999997 |
| 10941 | 163590.46499999997 |
| 10941 | 163590.46499999997 |
| 14169 | 163590.46499999997 |
| 13498 | 163590.46499999997 |
| 13498 | 163590.46499999997 |
| 14152 | 163590.46499999997 |
| 14152 | 163590.46499999997 |

***** Commute + Zero + One

#+name: qr-decomp-commute-zero-one-size
#+call: get-size(qr-decomp-commute-zero-one-raw-data)

#+name: qr-decomp-commute-zero-one-cost
#+call: get-cost(qr-decomp-commute-zero-one-raw-data)

#+name: qr-decomp-commute-zero-one
#+call: zip-table(qr-decomp-commute-zero-one-size, qr-decomp-assoc-cost)

#+RESULTS[71d3f7ab4502c664e23d15448356ff91de44364f]: qr-decomp-commute-zero-one
|   180 |         163590.465 |
|  1288 |         163590.465 |
|  5222 | 163590.46499999997 |
|  6339 | 163590.46499999997 |
|  7152 | 163590.46499999997 |
|  7152 | 163590.46499999997 |
| 13385 | 163590.46499999997 |
| 13404 | 163590.46499999997 |
| 13404 | 163590.46499999997 |
| 13404 | 163590.46499999997 |
| 19747 | 163590.46499999997 |
| 20269 | 163590.46499999997 |
| 20269 | 163590.46499999997 |
| 22655 | 163590.46499999997 |
| 22655 | 163590.46499999997 |
| 22655 | 163590.46499999997 |
| 22655 | 163590.46499999997 |

**** q-prod

***** No Ruler
#+name: q-prod-no-ruler-size
#+call: get-size(q-prod-no-ruler-raw-data)

#+RESULTS: q-prod-no-ruler-size
| Size |
|------|
|  102 |
|  397 |
|  719 |
|  905 |
| 1181 |
| 1461 |
| 1695 |
| 1872 |
| 1992 |
| 2063 |
| 2105 |
| 2117 |

#+name: q-prod-no-ruler-cost
#+call: get-cost(q-prod-no-ruler-raw-data)

#+RESULTS: q-prod-no-ruler-cost
|               Cost |
|--------------------|
|  503.5590000000001 |
|            502.659 |
|  501.6600000000001 |
|            492.963 |
| 387.97499999999997 |
|            387.579 |
|            387.579 |
| 376.79900000000004 |
|            359.225 |
|            358.225 |
| 157.23000000000002 |
| 157.23000000000002 |

#+name: q-prod-no-ruler
#+call: zip-table(q-prod-no-ruler-size, q-prod-no-ruler-cost)

#+RESULTS[ecb50ddf5f727645ca07e4dafec2c9ea38845805]: q-prod-no-ruler
|   102 |  503.5590000000001 |
|   589 |  503.5590000000001 |
|  1031 |  502.7610000000001 |
|  1298 | 501.86400000000003 |
|  1989 | 494.57500000000005 |
|  3302 |            390.701 |
|  4930 | 288.92400000000004 |
|  6319 | 288.82500000000005 |
|  6790 |            280.867 |
|  6917 | 280.76800000000003 |
|  6961 | 280.76800000000003 |
|  6961 | 280.76800000000003 |
|  8455 | 271.19599999999997 |
|  9339 |            268.303 |
|  9748 |             68.453 |
|  9952 |             68.453 |
| 10010 |             68.453 |
| 10034 |             68.453 |
| 10628 |             68.453 |
| 10638 |             68.453 |
| 10638 |             68.453 |

***** Baseline

#+name: q-prod-baseline-size
#+call: get-size(q-prod-baseline-raw-data)

#+name: q-prod-baseline-cost
#+call: get-cost(q-prod-baseline-raw-data)

#+name: q-prod-baseline
#+call: zip-table(q-prod-baseline-size, q-prod-baseline-cost)

#+RESULTS[3506f1496b3e4eaa60da9a99653263410869afbb]: q-prod-baseline
|   102 |  503.5590000000001 |
|   712 |  503.5590000000001 |
|  2036 | 502.76099999999997 |
| 14264 | 493.26099999999997 |

***** Tuning

#+name: q-prod-tuning-size
#+call: get-size(q-prod-tuning-raw-data)

#+name: q-prod-tuning-cost
#+call: get-cost(q-prod-tuning-raw-data)

#+name: q-prod-tuning
#+call: zip-table(q-prod-tuning-size, q-prod-tuning-cost)

#+RESULTS[abde4935ae161469104f4a71f8bc6727b949ffb0]: q-prod-tuning
|   102 |  503.5590000000001 |
|   607 |            502.659 |
|  1940 |  501.6600000000001 |
|  6023 |             492.76 |
|  7144 | 492.56199999999995 |
|  7265 | 492.56199999999995 |
|  7265 | 492.56199999999995 |
| 10510 | 492.56199999999995 |
| 10927 | 492.56199999999995 |
| 10580 | 492.56199999999995 |
| 10580 | 492.56199999999995 |
| 10580 | 492.56199999999995 |
| 11469 | 492.56199999999995 |
| 11865 | 492.56199999999995 |
| 12080 | 492.56199999999995 |
| 12132 | 492.56199999999995 |
| 12132 | 492.56199999999995 |
| 13548 | 492.56199999999995 |
| 13548 | 492.56199999999995 |
| 13548 | 492.56199999999995 |
| 13548 | 492.56199999999995 |
| 13548 | 492.56199999999995 |
| 13548 | 492.56199999999995 |
| 16094 | 492.56199999999995 |
| 19761 | 492.56199999999995 |
| 18549 | 492.56199999999995 |
| 18549 | 492.56199999999995 |
| 22448 | 492.56199999999995 |
| 23183 | 492.56199999999995 |
| 23183 | 492.56199999999995 |
| 23918 | 492.56199999999995 |
| 25388 | 492.56199999999995 |
| 25388 | 492.56199999999995 |
| 25388 | 492.56199999999995 |
| 26123 | 492.56199999999995 |
| 26123 | 492.56199999999995 |
| 27293 | 492.56199999999995 |

#+RESULTS: q-prod-baseline
|   102 |  503.5590000000001 |
|   607 |            502.659 |
|  1940 |  501.6600000000001 |
|  6023 |             492.76 |
|  7144 | 492.56199999999995 |
|  7265 | 492.56199999999995 |
|  7265 | 492.56199999999995 |
| 10510 | 492.56199999999995 |
| 10927 | 492.56199999999995 |
| 10580 | 492.56199999999995 |
| 10580 | 492.56199999999995 |
| 10580 | 492.56199999999995 |
| 11469 | 492.56199999999995 |
| 11865 | 492.56199999999995 |
| 12080 | 492.56199999999995 |
| 12132 | 492.56199999999995 |
| 12132 | 492.56199999999995 |
| 13548 | 492.56199999999995 |
| 13548 | 492.56199999999995 |
| 13548 | 492.56199999999995 |
| 13548 | 492.56199999999995 |
| 13548 | 492.56199999999995 |
| 13548 | 492.56199999999995 |
| 16094 | 492.56199999999995 |
| 19761 | 492.56199999999995 |
| 18549 | 492.56199999999995 |
| 18549 | 492.56199999999995 |
| 22448 | 492.56199999999995 |
| 23183 | 492.56199999999995 |
| 23183 | 492.56199999999995 |
| 23918 | 492.56199999999995 |
| 25388 | 492.56199999999995 |
| 25388 | 492.56199999999995 |
| 25388 | 492.56199999999995 |
| 26123 | 492.56199999999995 |
| 26123 | 492.56199999999995 |
| 27293 | 492.56199999999995 |

***** Commute

#+name: q-prod-commute-size
#+call: get-size(q-prod-commute-raw-data)

#+name: q-prod-commute-cost
#+call: get-cost(q-prod-commute-raw-data)

#+name: q-prod-commute
#+call: zip-table(q-prod-commute-size, q-prod-commute-cost)

#+RESULTS[ac72409036d7a2a70d77321500536b6471a78ab9]: q-prod-commute
|   102 |  503.5590000000001 |
|   604 |            502.659 |
|  2251 |  501.6600000000001 |
|  6050 |             492.76 |
|  8279 | 492.56199999999995 |
|  8517 | 492.56199999999995 |
|  8517 | 492.56199999999995 |
| 12027 | 492.56199999999995 |
| 12773 | 492.56199999999995 |
| 12890 | 492.56199999999995 |
| 12968 | 492.56199999999995 |
| 12968 | 492.56199999999995 |
| 13075 | 492.56199999999995 |
| 13075 | 492.56199999999995 |
| 15834 | 492.56199999999995 |
| 18486 | 492.56199999999995 |
| 18752 | 492.56199999999995 |
| 18764 | 492.56199999999995 |
| 18764 | 492.56199999999995 |
| 18764 | 492.56199999999995 |
| 17318 | 492.56199999999995 |
| 17932 | 492.56199999999995 |
| 18546 | 492.56199999999995 |
| 18853 | 492.56199999999995 |
| 18853 | 492.56199999999995 |
| 18853 | 492.56199999999995 |
| 19160 | 492.56199999999995 |
| 19160 | 492.56199999999995 |
| 21644 | 492.56199999999995 |
| 21644 | 492.56199999999995 |
| 21644 | 492.56199999999995 |
| 21644 | 492.56199999999995 |
| 26881 | 492.56199999999995 |

***** Assoc

#+name: q-prod-assoc-size
#+call: get-size(q-prod-assoc-raw-data)

#+name: q-prod-assoc-cost
#+call: get-cost(q-prod-assoc-raw-data)

#+name: q-prod-assoc
#+call: zip-table(q-prod-assoc-size, q-prod-assoc-cost)

#+RESULTS[c0ea50aae5fd3950cfbe798c4043ab8b4566cdb0]: q-prod-assoc
|   102 |  503.5590000000001 |
|   596 |            502.659 |
|  2235 | 496.05999999999995 |
|  4959 |            492.562 |
|  5818 |            492.562 |
|  5813 |            492.562 |
|  5813 |            492.562 |
|  7663 |            492.562 |
|  7967 |            492.562 |
|  8465 |            492.562 |
|  8501 |            492.562 |
|  8543 |            492.562 |
|  8543 |            492.562 |
|  9101 |            492.562 |
|  9101 |            492.562 |
| 10305 |            492.562 |
| 11643 |            492.562 |
| 11790 |            492.562 |
| 11832 |            492.562 |
| 11832 |            492.562 |
| 11832 |            492.562 |
| 12029 |            492.562 |
| 12475 |            492.562 |
| 12921 |            492.562 |
| 13144 |            492.562 |
| 13144 |            492.562 |
| 13144 |            492.562 |
| 13144 |            492.562 |
| 19940 |            492.562 |
| 19806 |            492.562 |
| 19806 |            492.562 |

***** Commute + Assoc

#+name: q-prod-commute-assoc-size
#+call: get-size(q-prod-commute-assoc-raw-data)

#+name: q-prod-commute-assoc-cost
#+call: get-cost(q-prod-commute-assoc-raw-data)

#+name: q-prod-commute-assoc
#+call: zip-table(q-prod-commute-assoc-size, q-prod-assoc-cost)

#+RESULTS[c5b3f67d49a8a3b946b9fd22ebf8f31ce7e84cb2]: q-prod-commute-assoc
|   102 |  503.5590000000001 |
|   627 |            502.659 |
|  2503 | 496.05999999999995 |
|  5047 |            492.562 |
|  6045 |            492.562 |
|  5930 |            492.562 |
|  6032 |            492.562 |
|  6010 |            492.562 |
|  6013 |            492.562 |
|  7084 |            492.562 |
|  7504 |            492.562 |
|  7563 |            492.562 |
|  7603 |            492.562 |
|  7623 |            492.562 |
|  7623 |            492.562 |
|  8093 |            492.562 |
|  8093 |            492.562 |
|  8679 |            492.562 |
|  8853 |            492.562 |
|  9541 |            492.562 |
|  9225 |            492.562 |
|  9321 |            492.562 |
|  9408 |            492.562 |
| 10080 |            492.562 |
| 11246 |            492.562 |
| 11776 |            492.562 |
| 11776 |            492.562 |
| 13088 |            492.562 |
| 14050 |            492.562 |
| 14544 |            492.562 |
| 14544 |            492.562 |

***** Commute + Zero

#+name: q-prod-commute-zero-size
#+call: get-size(q-prod-commute-zero-raw-data)

#+name: q-prod-commute-zero-cost
#+call: get-cost(q-prod-commute-zero-raw-data)

#+name: q-prod-commute-zero
#+call: zip-table(q-prod-commute-zero-size, q-prod-assoc-cost)

#+RESULTS[1400d770d4d240f30085c04340941a5d6da57f1f]: q-prod-commute-zero
|   102 |  503.5590000000001 |
|   639 |            502.659 |
|  2002 | 496.05999999999995 |
|  3320 |            492.562 |
|  5418 |            492.562 |
|  6448 |            492.562 |
|  6448 |            492.562 |
|  7740 |            492.562 |
|  7191 |            492.562 |
|  9583 |            492.562 |
|  9583 |            492.562 |
| 10252 |            492.562 |
| 10252 |            492.562 |
| 11827 |            492.562 |
| 13944 |            492.562 |
| 18664 |            492.562 |
| 22280 |            492.562 |
| 22280 |            492.562 |
| 23164 |            492.562 |
| 23164 |            492.562 |
| 23164 |            492.562 |
| 23164 |            492.562 |

***** Commute + Zero + One

#+name: q-prod-commute-zero-one-size
#+call: get-size(q-prod-commute-zero-one-raw-data)

#+name: q-prod-commute-zero-one-cost
#+call: get-cost(q-prod-commute-zero-one-raw-data)

#+name: q-prod-commute-zero-one
#+call: zip-table(q-prod-commute-zero-one-size, q-prod-assoc-cost)

#+RESULTS[2fd54be72ce07dd404a83bc7f9cc522584c81e0a]: q-prod-commute-zero-one
|   102 |  503.5590000000001 |
|   671 |            502.659 |
|  2219 | 496.05999999999995 |
|  4188 |            492.562 |
|  6709 |            492.562 |
|  8082 |            492.562 |
|  8082 |            492.562 |
|  8830 |            492.562 |
|  9420 |            492.562 |
|  9790 |            492.562 |
|  9790 |            492.562 |
|  9790 |            492.562 |
| 13335 |            492.562 |
| 17968 |            492.562 |
| 19112 |            492.562 |
| 19112 |            492.562 |
| 20212 |            492.562 |
| 20212 |            492.562 |
| 25822 |            492.562 |
| 28572 |            492.562 |
| 28572 |            492.562 |
| 28572 |            492.562 |
| 28572 |            492.562 |
| 28572 |            492.562 |

**** Plot

#+begin_src emacs-lisp
,#+header: :var mm_commute=q-prod-commute
,#+header: :var mm_assoc=q-prod-assoc
,#+header: :var mm_commute_assoc=q-prod-commute-assoc
,#+header: :var mm_commute_zero=q-prod-commute-zero
,#+header: :var mm_commute_zero_one=q-prod-commute-zero-one
#+end_src

#+header: :width 600 :height 500
#+header: :var mm_no_ruler=q-prod-no-ruler
#+header: :var mm_baseline=q-prod-baseline
#+header: :var mm_tuning=q-prod-tuning
#+begin_src R :session graphics :results graphics file :file q-prod-cost2.png
library(tidyverse)

max_rows <- max(nrow(mm_no_ruler),
                nrow(mm_baseline),
                nrow(mm_tuning),
                nrow(mm_commute),
                nrow(mm_assoc),
                nrow(mm_commute_assoc),
                nrow(mm_commute_zero),
                nrow(mm_commute_zero_one))

df = data.frame(
  "no_ruler" = c(mm_no_ruler$V1, rep(NA, max_rows - nrow(mm_no_ruler))),
  "baseline" = c(mm_baseline$V1, rep(NA, max_rows - nrow(mm_baseline))),
  "tuning" = c(mm_tuning$V1, rep(NA, max_rows - nrow(mm_tuning)))
  ## "commute" = c(mm_commute$V2, rep(NA, max_rows - nrow(mm_commute))),
  ## "assoc" = c(mm_assoc$V2, rep(NA, max_rows - nrow(mm_assoc))),
  ## "commute_assoc" = c(mm_commute_assoc$V2, rep(NA, max_rows - nrow(mm_commute_assoc))),
  ## "commute_zero" = c(mm_commute_zero$V2, rep(NA, max_rows - nrow(mm_commute_zero))),
  ## "commute_zero_one" =
  ##   c(mm_commute_zero_one$V2, rep(NA, max_rows - nrow(mm_commute_zero_one)))
)

colnames(mm_no_ruler) <- c("Size", "Cost")
colnames(mm_baseline) <- c("Size", "Cost")
colnames(mm_tuning) <- c("Size", "Cost")

ggplot(## data = mm_tuning
  ## mapping = aes(x = as.numeric(seq(1, max_rows)))
) +
  geom_line(data = mm_no_ruler,
            mapping = aes(x = as.numeric(seq(1, nrow(mm_no_ruler))),
                          y = Cost, color = "no_ruler")) +
  geom_line(data = mm_baseline,
            mapping = aes(x = as.numeric(seq(1, nrow(mm_baseline))),
                          y = Cost, color = "baseline")) +
  geom_line(data = mm_tuning,
            mapping = aes(x = as.numeric(seq(1, nrow(mm_tuning))),
                          y = Cost, color = "tuning")) +
  ## geom_line(mapping = aes(y = baseline, color = "baseline")) +
  ## geom_line(mapping = aes(y = tuning, color = "tuning")) +
  ## geom_line(mapping = aes(y = commute, color = "commute")) +
  ## geom_line(mapping = aes(y = assoc, color = "assoc")) +
  ## geom_line(mapping = aes(y = commute_assoc, color = "commute_assoc")) +
  ## geom_line(mapping = aes(y = commute_zero, color = "commute_zero")) +
  ## geom_line(mapping = aes(y = commute_zero_one, color = "commute_zero_one")) +
  theme(legend.position = "bottom")
#+end_src

#+RESULTS:
[[file:../q-prod-cost2.png]]

** Trying to figure out the why

Using =unop_rule("neg" "VecNeg")=, =unop_rule("sqrt", "VecSqrt")=, and =unop_rule("sgn", "VecSgn")= but almost nothing else makes =no_ruler= significantly better than any of the ruler rulesets.

The funny thing is that ruler also has access to these rules.

Out of those, it seems that the ="neg"= rule is the most important. This is for the =q-prod= benchmark.

Now I'm trying to add ruler rules one-by-one to see which ones cause the performance to tank.

I'm going to start by removing all the rules that seem remotely "assoc" or "commute" like.

Here are some rules that seem to cause problems:

#+begin_src json
{
    "lhs": "(* ?a ?b)",
    "rhs": "(* ?b (* 1 ?a))",
    "bidirectional": true
}
#+end_src

That one makes sense because it's basically an commutativity rule.

#+begin_src json
{
    "lhs": "(+ (* ?a ?b) (* ?a ?c))",
    "rhs": "(* ?a (+ ?b ?c))",
    "bidirectional": true
},
#+end_src

I tried the "baseline" rules minus the distributivity rule above. That took a very long time and was worse than just the pure baseline rules. What about removing both of the above rules?

That didn't work. Now let's remove the "base" commutativity rules. it made it take drastically less time + ram. However, it still does worse than just the default ruler generated rules.

Removing these rules
#+begin_src json
{
    "lhs": "(+ (+ ?a ?b) (+ ?c ?d))",
    "rhs": "(+ (+ ?c ?a) (+ ?b ?d))",
    "bidirectional": true
},
{
    "lhs": "(* (* ?a ?b) (* ?c ?d))",
    "rhs": "(* (* ?d ?b) (* ?a ?c))",
    "bidirectional": true
},
#+end_src

Made almost no difference.

I put those rules back and now am trying removing:
#+begin_src json
{
    "lhs": "(+ ?a (+ ?b ?c))",
    "rhs": "(+ ?b (+ ?a ?c))",
    "bidirectional": false
},
{
    "lhs": "(* ?a (* ?b ?c))",
    "rhs": "(* ?c (* ?a ?b))",
    "bidirectional": true
},
#+end_src


Again almost no difference. Putting them back and removing:
#+begin_src json
{
    "lhs": "(* ?a (* ?b ?c))",
    "rhs": "(* 1 (* ?a (* ?b ?c)))",
    "bidirectional": true
},
{
    "lhs": "(+ ?a (+ ?b ?c))",
    "rhs": "(+ 0 (+ ?a (+ ?b ?c)))",
    "bidirectional": true
},
#+end_src

Again, almost no difference. Also removing the following because it has a similar flavor to the two above.
#+begin_src json
{
    "lhs": "(+ ?a (+ 0 (* ?b ?c)))",
    "rhs": "(+ ?a (* ?b ?c))",
    "bidirectional": true
},
#+end_src

Removing:
#+begin_src json
{
    "lhs": "(+ ?a ?a)",
    "rhs": "(* ?a 2)",
    "bidirectional": true
},
#+end_src

Removing:
#+begin_src json
{
    "lhs": "(* 0 ?a)",
    "rhs": "0",
    "bidirectional": false
},
{
    "lhs": "(+ 0 ?a)",
    "rhs": "(* 1 ?a)",
    "bidirectional": true
}
#+end_src

Removing and then adding the 3 rules above back in:
#+begin_src json
{
    "lhs": "(+ (+ ?a ?b) (+ ?c ?d))",
    "rhs": "(+ (+ ?c ?a) (+ ?b ?d))",
    "bidirectional": true
},
{
    "lhs": "(* (* ?a ?b) (* ?c ?d))",
    "rhs": "(* (* ?d ?b) (* ?a ?c))",
    "bidirectional": true
},
{
    "lhs": "(+ ?a (+ ?b ?c))",
    "rhs": "(+ ?b (+ ?a ?c))",
    "bidirectional": false
},
{
    "lhs": "(* ?a (* ?b ?c))",
    "rhs": "(* ?c (* ?a ?b))",
    "bidirectional": true
}
#+end_src

Ok, what I have I learned.
1) Most ruler rules seem to be strictly worse than just using the default dios rules. I haven't tried every possible combination of ruler rules. Just informally removed and added rules. There are some sets (usually very small sets) that end up finding programs that are similarly as good. However, they are either slower and/or require a searching and generating a larger e-graph.
2) Maybe interesting? I'm not sure. You can either plot iter vs. cost or size vs. cost. Naively I would expect these graphs to follow similar trends. As you run more iterations, the size of the egraph gets bigger and because there are more programs, you would expect the cost to go down. 

Some generated questions:
1) What are the "important" dios rules for =q-prod=? Is this the same set of all 4 benchmarks? Do we / can we generate similar rules from =ruler= (at the moment I'm only using non-vector ruler rules).
2) Can we get =ruler= rules to be better by increasing the node limit or time limit?
